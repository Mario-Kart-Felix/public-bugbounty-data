```<!DOCTYPE html><html><head><meta name="viewport" content="width=device-width, initial-scale=1" class="jsx-3208580227"/><meta charSet="utf-8" class="jsx-3208580227"/><meta name="Description" content="Brad Barrow&#x27;s Blog" class="jsx-3208580227"/><style id="jss-server-side">$</style><title class="jsx-3208580227">Brad Barrow&#x27;s Blog</title><link rel="shortcut icon" href="favicon.ico" type="image/x-icon" class="jsx-3208580227"/><script src="/static/layoutScript.js" class="jsx-3208580227"></script><meta name="next-head-count" content="7"/><link rel="preload" href="/_next/static/chunks/main-1a0b48e76d1a25b5954c.js" as="script"/><link rel="preload" href="/_next/static/chunks/webpack-488dc228921f1fdbc0e7.js" as="script"/><link rel="preload" href="/_next/static/chunks/framework.a5d4ffe593e18b49243e.js" as="script"/><link rel="preload" href="/_next/static/chunks/commons.2c990f5acfba8cce8cde.js" as="script"/><link rel="preload" href="/_next/static/chunks/pages/_app-ddaf94004a81f2f7f2c1.js" as="script"/><link rel="preload" href="/_next/static/chunks/9f96d65d.94eaa061f5101393e8b9.js" as="script"/><link rel="preload" href="/_next/static/chunks/24cc8a7e01ac9d85e38f29fc4987db83269d4616.3441cd27ae9051da26be.js" as="script"/><link rel="preload" href="/_next/static/chunks/pages/index-b0bc3ad5c186ea0c1659.js" as="script"/><style id="__jsx-3208580227">@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;700;800;900&display=swap');html,body{font-size:large;margin:0;padding:0;font-family:'Inter',-apple-system,BlinkMacSystemFont,'Segoe UI', Roboto,Oxygen,Ubuntu,Cantarell,'Open Sans','Helvetica Neue', sans-serif;color:#445566;background-color:#f5f0df;}h1{font-weight:bolder;font-size:3rem;}h2{font-weight:bold;font-size:2rem;}h3{font-size:1.5rem;}h4{font-size:1rem;}h1,h2,h3,h4,h5,h6{font-family:'Roboto',sans-serif;font-weight:bold;color:#362438;}pre{overflow:scroll;padding-left:10px;padding-right:10px;padding-top:20px;padding-bottom:20px;background:#4b6ed224;color:#884b6f;}code{font-size:small;font-family:'PT Mono',monospace;}p{font-family:'Inconsolata',monospace;}a{color:#452e47;}a:hover{color:#dcc2e0;}.content{padding:2rem 20px;-webkit-flex:1;-ms-flex:1;flex:1;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.content img{margin-top:50px;margin-bottom:50px;max-width:800px;}#bottomImage{display:block;margin-left:auto;margin-right:auto;margin-top:20px;margin-bottom:10px;width:80%;}.regularFooter{width:100%;height:100px;border-top:1px solid #eaeaea;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.postFooter{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-left:20px;width:400px;}footer img{padding:0 5px;height:1rem;}footer p{padding-right:10px;}.brain{margin-left:auto;margin-right:auto;margin-top:100px;margin-bottom:100px;width:200px;background-image:url(/static/JustBrain.svg);background-repeat:no-repeat;background-position:left top;padding-top:95px;margin-bottom:60px;-webkit-animation-duration:4s;animation-duration:4s;-webkit-animation-fill-mode:both;animation-fill-mode:both;}.eye{background-image:url(/static/JustEye.svg);background-repeat:no-repeat;background-position:left top;position:relative;bottom:50px;left:59px;padding-top:95px;margin-bottom:60px;-webkit-animation-duration:4s;animation-duration:4s;-webkit-animation-fill-mode:both;animation-fill-mode:both;}@-webkit-keyframes bounce{0%,3%,10%,18%,100%{-webkit-transform:translateY(0);-ms-transform:translateY(0);transform:translateY(0);}7%{-webkit-transform:translateY(-30px);-ms-transform:translateY(-30px);transform:translateY(-30px);}15%{-webkit-transform:translateY(-15px);-ms-transform:translateY(-15px);transform:translateY(-15px);}}@keyframes bounce{0%,3%,10%,18%,100%{-webkit-transform:translateY(0);-ms-transform:translateY(0);transform:translateY(0);}7%{-webkit-transform:translateY(-30px);-ms-transform:translateY(-30px);transform:translateY(-30px);}15%{-webkit-transform:translateY(-15px);-ms-transform:translateY(-15px);transform:translateY(-15px);}}.bounce{-webkit-animation-timing-function:cubic-bezier(.14,.75,.2,1.01);animation-timing-function:cubic-bezier(.14,.75,.2,1.01);-webkit-animation-name:bounce;animation-name:bounce;-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite;}#normalHeader{border-bottom:none;}.path{stroke-dasharray:450;stroke-dashoffset:450;-webkit-animation:draw 2s linear forwards;animation:draw 2s linear forwards;}@-webkit-keyframes draw{to{stroke-dasharray:0;stroke-dashoffset:0;}}@keyframes draw{to{stroke-dasharray:0;stroke-dashoffset:0;}}#wholeShark{-webkit-transform:translate(-400px,0px);-ms-transform:translate(-400px,0px);transform:translate(-400px,0px);-webkit-animation:moveShark 2s linear forwards;animation:moveShark 2s linear forwards;}@-webkit-keyframes moveShark{to{-webkit-transform:translate(100px,0px);-ms-transform:translate(100px,0px);transform:translate(100px,0px);}}@keyframes moveShark{to{-webkit-transform:translate(100px,0px);-ms-transform:translate(100px,0px);transform:translate(100px,0px);}}#SharkEyeHead,#SharkNoseStuffHead,#SharkStylHead,#SharkBackgroundHead{-webkit-transform:rotate(-6deg) translate(-105px,190px);-ms-transform:rotate(-6deg) translate(-105px,190px);transform:rotate(-6deg) translate(-105px,190px);-webkit-animation:moveMouth .3s linear forwards;animation:moveMouth .3s linear forwards;-webkit-animation-direction:alternate;animation-direction:alternate;-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite;}@-webkit-keyframes moveMouth{to{-webkit-transform:rotate(0deg) translate(0px,0px);-ms-transform:rotate(0deg) translate(0px,0px);transform:rotate(0deg) translate(0px,0px);}}@keyframes moveMouth{to{-webkit-transform:rotate(0deg) translate(0px,0px);-ms-transform:rotate(0deg) translate(0px,0px);transform:rotate(0deg) translate(0px,0px);}}</style><style id="__jsx-1736106505">header.jsx-1736106505{width:600px;height:100px;border-bottom:1px solid #eaeaea;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding-left:20px;}nav.jsx-1736106505{font-weight:bold;font-size:1.3rem;}nav.jsx-1736106505 a.jsx-1736106505{margin-right:20px;-webkit-text-decoration:none;text-decoration:none;}nav.jsx-1736106505 a.jsx-1736106505:hover{-webkit-text-decoration:underline;text-decoration:underline;}</style><style id="__jsx-3617506183">.title.jsx-3617506183{margin:1rem auto;font-size:3rem;}</style></head><body><div id="__next"><link href="https://fonts.googleapis.com/css2?family=Inconsolata&amp;display=swap" rel="stylesheet" class="jsx-3208580227"/><link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&amp;display=swap" rel="stylesheet" class="jsx-3208580227"/><link href="https://fonts.googleapis.com/css2?family=PT+Sans:wght@700&amp;family=Roboto:wght@400;700;900&amp;display=swap" rel="stylesheet" class="jsx-3208580227"/><script async="" src="https://www.googletagmanager.com/gtag/js?id=UA-154810525-1" class="jsx-3208580227"></script><script src="static/google.js" class="jsx-3208580227"></script><link rel="stylesheet" href="static/glitch.css" class="jsx-3208580227"/><section class="jsx-3208580227 layout"><header id="normalHeader" class="jsx-1736106505 header"><h1 class="jsx-1736106505 title"><a style="text-decoration:none" class="jsx-1736106505" href="/">Brad Barrows</a></h1><nav style="border-left:solid" role="navigation" aria-label="main navigation" class="jsx-1736106505 nav"><a href="https://github.com/bebrws" style="display:block;padding-left:10px" class="jsx-1736106505">Github</a><a href="https://linkedin.com/in/bbarrows" style="display:block;padding-left:10px" class="jsx-1736106505">LinkedIn</a><a style="padding-left:10px;text-decoration:none" href="#">Msg Me</a></nav></header><div class="jsx-3208580227 content"><h2 class="jsx-3617506183">Thoughts And Notes:</h2><div id="brain" class="jsx-3617506183 brain"><div id="eye" class="jsx-3617506183 bounce eye"></div></div><main class="jsx-3617506183"><nav class="MuiList-root MuiList-padding"><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Alacritty - builtin tab support - no tmux needed - possible performance improvement</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2021-01-17</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Debugging and working on Rust in XCode - Debug with LLDB using the XCode interface</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-12-30</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Ever hit enter mindlessly in your shell? Why not do something useful with that. ZSH Hook Functions</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-12-30</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">ZSH shortcut (keybinding) to replace cursor selected word with your preset choice</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-12-29</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Debugging a Rust process in VSCode by attaching to process - useful for say.. a terminal emulator</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-12-20</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Using tmux to change directory with a mouse click</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-12-15</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Map and Reduce in the Shell with Javascript</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-11-22</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Packateer - A new testing tool for testing one or more React Components using Puppeteer</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-11-22</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Spleeter - Cut/separate out levels into tracks from a song</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-11-22</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Modify String prototype for replaceAll</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-11-14</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Animating SVGs using CSS ( using Affinity Designer to create SVGs )</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-11-01</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">My Kubernetes aliases and functions using fzf</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-10-21</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Javascript FlatMap Usage</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-10-20</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Escaping Single Quotes Within Single Quotes in Bash and ZSH</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-10-20</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Python List Comprehension in Javascript</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-10-20</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Conways Game Of Life and the Rust GFX Library</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-10-06</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Conways Game Of Life and the Rust NVG Library</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-10-01</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Alacritty - A Fast OSX Terminal</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-9-17</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Chrome Extension to Fuzzy Search Bookmarks and History</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-9-07</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Creating a keyboard shortcut to console log the selected javascript expression in VSCode</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-9-07</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Convert any video format to a gif</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-9-07</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Chrome Debugger Window always on top script</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-9-06</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Github Repository Statistics command line tool grst</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-9-04</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Find recently updated Github forks and clones with the command line tool gfnfs</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-9-04</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">addAlias - taking notes and improving productivity</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-8-31</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">FZNim - My fzf like library and clone writtin in Nim</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-8-30</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Writing a fuzzy string search algorithm in Nim</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-8-30</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Nim Documentation Chrome Extension</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-7-01</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Ish</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-6-6</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Building this blog</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-6-6</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Getting Input from STDIN after piping in STDIN to a C or Nim program</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-1-22</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Writing Nim Command Line Utilities</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2020-1-20</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Summertime</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2019-12-22</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Wireguard</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2019-12-14</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">OSX - Manually configuring System Preferences Security And Privacy settings</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2019-07-01</span></div></div></div><div class="MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button" tabindex="0" role="button" aria-disabled="false"><div class="MuiListItemIcon-root"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></svg></div><div style="display:flex;justify-content:space-between;width:100%"><div class="MuiListItemText-root jss1"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">Me Surfing</span></div><hr class="MuiDivider-root"/><div class="MuiListItemText-root jss1" style="width:100px;max-width:100px"><span class="MuiTypography-root jss2 MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock">2018-9-30</span></div></div></div></nav></main><div style="margin-top:40px" class="jsx-3617506183"><img id="bottomImage" src="/static/bigsurf.png" alt="A beautiful surf photo I took" class="jsx-3617506183"/></div></div></section><footer class="jsx-3208580227 regularFooter"><p class="jsx-3208580227">© 2020 Bradley Barrows</p> <p class="jsx-3208580227">|</p> <p class="jsx-3208580227"><a href="/rss.xml" class="jsx-3208580227">RSS Feed</a></p><p class="jsx-3208580227">|</p> <p class="jsx-3208580227"><a href="/about" class="jsx-3208580227">About</a></p></footer></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"posts":[{"frontmatter":{"title":"Alacritty - builtin tab support - no tmux needed - possible performance improvement","author":"Brad Barrows","date":"2021-01-17","hero_image":"/static/alacritty-tabs.png"},"markdownBody":"\n## Re write of the Alacritty Event Loop\n\nWhile getting started on this I found an awesome project named [session-manager](https://github.com/nw0/session-manager).\n\nThis provided a great way for me to see how the lower level TTY code and ansi processing was implemented.\n\nI played around with this for a while, adding support for colors and then upon realizing that most of this session-manager code came from Alacritty, decided that I should give adding tabs to Alacritty a shot.\n\nWhen digging into the Alacritty source I realized I would need some struct to manage the tabs and Term/PTY struct state throughout the app. Unfortunately this meant passing around an Arc\u003cMutex\u003cT\u003e\u003e and lots of locking and unlocking.\n\nLuckily this mutex use along with the removal of the use of channels actually lead to performance improvements. I believe this may mostly be due to the simplified process of reading input from the TTY file descriptor. I now just spin off a thread for each tty and in that thread there is a simple loop which reads and then writes directly to the ansi processor, skipping the previous process of sending bytes over a channel and then into an event loop.\n\nCurrently the key bindings default to Command + T for a new tab. Command + Shift + Left Bracket for previous tab and Command + Shift + Right Bracket for the next tab.\n\nThe build of Alacritty, based off of the official v0.7.0-dev tag can be found at [alacritty DMG download](https://github.com/bebrws/alacritty-tabs/releases/download/v0.7.1-tabs/Alacritty.zip).\n\nThe code is up at [alacritty](https://github.com/bebrws/alacritty-tabs/). Note that this has only been tested on OSX.\n\n## Performance\n\nThe only way I spent time trying to measure performance was by timing the find file print out of my local llvm-project directory.\n\nI am seeing slightly faster times when running:\n\n```\ntime find ~/repos/llvm-project\n```\n\nwith my build of Alacritty than with the official build.\n\n\n## New functionality\n\nI also hardcoded the new feature (no keybinding) for Command Click to write the word under the cursor into the terminal. I thought this would be a huge time saver instead of double clicking, copy, and then pasting.\n\n## Screen Capture with Tabs\n\n![Alacritty With Tabs in action](/static/alacrittytabs.gif)\n\n## Example alacritty.yml file:\n\n```\n\nbackground_opacity: 1\nwindow:\n  dimensions:\n    columns: 150\n    lines: 50\n  padding:\n    x: 10\n    y: 10\n  dynamic_padding: true\n  decorations: buttonless\nscrolling:\n  history: 10000\n  multiplier: 40\nkey_bindings:\n  - key: W\n    mods: Command\n    action: ToggleFullscreen\n  - key: N\n    mods: Command|Shift\n    action: SpawnNewInstance\n  - key: F\n    mods: Command|Shift\n    action: ToggleFullscreen\n  - key: Equals\n    mods: Command|Shift\n    action: IncreaseFontSize\n  - key: Minus\n    mods: Command|Shift\n    action: DecreaseFontSize\nfont:\n  size: 12\n  normal:\n    family: Menlo\n    style: Regular\n  bold:\n    family: Menlo\n    style: Bold\n  italic:\n    family: Menlo\n    style: Italic\ncustom_cursor_colors: true\ncolors:\n  # Default colors\n  primary:\n    # hard contrast: background = '#f9f5d7'\n    background: '#1A2025'\n    foreground: '#e3dfc5'\n\n    dim_foreground: '#dbdbdb'\n    bright_foreground: '#d9d9d9'\n    dim_background: '#202020'    # not sure\n    bright_background: '#3a3a3a' # not sure\n\n  # Cursor colors\n  cursor:\n    text: '#2c2c2c'\n    cursor: '#d9d9d9'\n\n  # Normal colors\n  vi_mode_cursor:\n    text: '#2e3440'\n    cursor: '#d8dee9'\n  selection:\n    text: CellForeground\n    background: '#4c566a'\n  search:\n    matches:\n      foreground: CellBackground\n      background: '#abd3de'\n    bar:\n      background: '#434c5e'\n      foreground: '#d8dee9'\n  normal:\n  # Bright colors\n    black: '#1c1c1c'\n    red: '#bc5653'\n    green: '#b4c28a'\n    yellow: '#ebc17a'\n    blue: '#7eaac7'\n    magenta: '#aa6292'\n    cyan: '#d3dde8'\n    white: '#cacaca'\n\n  # Bright colors\n  bright:\n    black: '#636363'\n    red: '#bc5653'\n    green: '#b4c28a'\n    yellow: '#ebc17a'\n    blue: '#7eaac7'\n    magenta: '#aa6292'\n    cyan: '#d3dde8'\n    white: '#f7f7f7'\n\n  # Dim colors\n  dim:\n    black: '#232323'\n    red: '#74423f'\n    green: '#9ea880'\n    yellow: '#8b7653'\n    blue: '#556b79'\n    magenta: '#6e4962'\n    cyan: '#5c8482'\n    white: '#828282'\n  indexed_colors:\n    - {index: 16, color: '#232323'}\n    - {index: 17, color: '#d65d0e'}\n    - {index: 18, color: '#000000'}\n    - {index: 19, color: '#d5c4a1'}\n    - {index: 20, color: '#665c54'}\n    - {index: 21, color: '#3c3836'}\nhide_cursor_when_typing: true\nshell:\n  program: /bin/zsh\n  args:\n    - -l\n\n\n```\n\nThis can be copy and pasted into a file which should be placed at:\n\n```\n~/.config/alacritty/alacritty.yml\n```","slug":"alacrittytabs"},{"frontmatter":{"title":"Debugging and working on Rust in XCode - Debug with LLDB using the XCode interface","author":"Brad Barrows","date":"2020-12-30"},"markdownBody":"\n\n## Setup\n\nTo get Rust in XCode working you just need to go and clone this repo:\n\nhttps://github.com/bebrws/rust-xcode-plugin\n\nI have an install script I created for myself as well:\n\n```\ngit clone https://github.com/bebrws/rust-xcode-plugin.git\ncd rust-xcode-plugin\n./install.sh\n```\n\nAfterwords close and open XCode.\n\nIf later you notice that you cannot set breakpoints then you will need to add your XCode UUID to the plist file.\n\nFollow the directions in the README. You just have to run the command they provide and add it to the plist.\n\n# Creating XCode Projects For Yur Rust Projects\n\nBe sure to check out the amazing project:\n\nhttps://crates.io/crates/cargo-xcode/1.1.1\n\nTo use run:\n\n```\nhttps://crates.io/crates/cargo-xcode/1.1.1\n```\n\nand from your Rust project root run:\n\n```\ncargo-xcode\n```\n\nYou now have an xcodeproj file with your XCode project!\n\nOpen this and if you have the Rust plugin installed correctly from above you will be ready to build and debug your rust project, using the LLDB front end provided by XCode. Which IMO can be kind of nice. Especially if your running into issues with Rust VSCode debugging.\n\nAlthough I did write a post about setting this up as well and it has been working great for me too.\n\nYou will most likely need to make sure your projevt has similar settings for the \"Scheme\". I took screen shots and list them below.\n\n\n### For Mac OSX Only Right Now\n\n### For iOS \n\nCheckout the rust-bitcode repo\n\n\nConfiguaration that worked for me in XCode 12.3\n\nGoto \n\nProduct -\u003e Scheme -\u003e Edit Scheme\n\nThen under Run:\n\n![XCode Scheme Settings Info](/static/xcode-scheme-info.png)\n\n![XCode Scheme Settings Info](/static/xcode-scheme-options.png)\n\n![XCode Scheme Settings Info](/static/xcode-scheme-arguments.png)\n\nIf you are running into an error regarding the deployment target you just need to bump the deployment target here up to a recent version\n\n![XCode Scheme Settings Info](/static/xcode-deployment-target.png)","slug":"rustxcode"},{"frontmatter":{"title":"Ever hit enter mindlessly in your shell? Why not do something useful with that. ZSH Hook Functions","author":"Brad Barrows","date":"2020-12-30"},"markdownBody":"# ZSH Is Amazingly Powerful - Some More\n\nThis function will keep track of the commands entered. Including the previous command.\n\nWhen the command is an empty string then it will provide a directory listing.\n\nI am finding this to be useful when used along with the key binding I posted for changing to my repository directories.\n\nNow, after I use my \"change to a repository directory\" keybinding, I am able to hit enter right away, which I had to anyway to get the new prompt line to show up, and I am now given a directory listing.\n\n## The Code\n\n### Setup\n\nThis line needs to be somewhere before the meat of this:\n```\nautoload -U add-zsh-hook\n```\n## The Functions\n\nThen the actual function/s:\n\n```\n\n# last non empty command entered is $lcmd \nempty_command_preexec(){ ncmd=$1; }\nadd-zsh-hook -Uz preexec empty_command_preexec\nempty_command_precmd(){ \n  if [ \"$ncmd\" ]; then \n      lcmd=$ncmd; ncmd=; \n    else; \n      exa -a -a -l\n    fi; \n  }\nadd-zsh-hook -Uz precmd empty_command_precmd\n\n```\n\n\nThis code is actually mostly from a [StackOverflow article](https://unix.stackexchange.com/questions/515356/make-zsh-run-a-command-when-no-command-is-entered) but I thought it would go well with the directory changing function and wanted to remember how to do this anyway.\n\nIt might be best to just make one document or page with the most helpful shell aliases/functions/tools I have and a list of resources/references.\n\n\n\n","slug":"zshmindlessenter"},{"frontmatter":{"title":"ZSH shortcut (keybinding) to replace cursor selected word with your preset choice","author":"Brad Barrows","date":"2020-12-29","hero_image":"/static/zshstringreplace.gif"},"markdownBody":"# ZSH Is Amazingly Powerful\n\nOne of my favorite features is actually it's \"line editor\" Zle.\n\nZle is what powers ZSH' input. It provides a quick and easy way to jump through words and syntax, forwards and backwards, providing powerful features all for the sole function of editing one single line (usually - of course it can do more).\n\nSo far, I have found that the easiest way to use Zle is with ZSH Widgets.\n\nThese Widgets can be bound to keys with bind-key. In this Widgets you are allowed to use the Zle line editor and there you can do cool things like show a message below the prompt. Take input below the prompt. Edit the current prompt. Read the current text being entered into the prompt. Etc etc..\n\nTo send keys to the terminal, effectively typing where your cursor currently is you can run:\n\n```\nexport AVAR=\"STRING\"; Zle -U $AVAR\n```\n\nand STRING will appear where your cursor is as if you had typed it. \n\nIt is amazing how powerful a shell can be. You have zsh hooks to run zsh functions on certain events such as changing directories or on signals, you can edit, view and analyze the current prompt all the while having the ability to run processes and manipulate the output.\n\n## Creating a ZSH Widget\n\nI use fzf so that I can quickly script user interfaces that are fast and easy to use. This is going to be another widget where I end up using fzf to take care of what could potentially be a repetitive and annoying task.\n\nUse case and a question:\n\nThere are always multiple versions of clang and ar installed on my laptop. The compiler and linker that ships with OSX and that come with XCode are different. \n\nI don't know why and would love to know actually if anyone can tell me why the ar binary (linker) that is part of a fresh OSX install won't create binaries that can be linked or compiled with another clang build. ( This is not an issue with libtool. ) I get error messages sometimes saying that clang is trying to link a file for architecure A with the same arcitecture A. (It will say something like \"unable to link the binary compiled for x86_64 with the other x86_64 binary\".)\n\nAnyhow, I hate using xcrun to find the location of the toolchain files and sometimes require CFLAGS or linker arguments and other things I want to quickly look up (and I don't want in an environment variable). So I created the following:\n\n```\nfunction replacecurrentword() {\n    export CURRENTWORD=\"${LBUFFER/* /}${RBUFFER/ */}\"\n\n    Zle kill-word\n    Zle backward-kill-word\n\n  if [ -z \"$CURRENTWORD\" ]; then\n    export REPLACEMENT=\"$(cat ~/.my_inserts| fzf  )\"\n  else \n    export REPLACEMENT=\"$(cat ~/.my_inserts| fzf  -q $CURRENTWORD)\"\n  fi\n\n    Zle -M \"Replacing $CURRENTWORD with $REPLACEMENT\"\n\n    Zle -U \"$REPLACEMENT\"\n}\nZle -N replacecurrentword\nbindkey \"^rr\" replacecurrentword\n```\n\nNow this is bound to the following:\nControl + r + r\n\nThen I go and create a file at ~/.my_inserts\n\nCurrently mine looks like:\n\n```\n/usr/local/Cellar/llvm/11.0.0/bin/clang\n/usr/local/Cellar/llvm/11.0.0/bin/ar\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang  -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk\n```\n\nNow I can be typing say:\n\n```\n./configure CC= clang\n```\n\nand with my cursor over clang I can hit Control + r + r\n\nThen select one of the clang strings I have selected to set the compiler for the configuration script.\n\nI may need to jump back and add some quotes around the replaced string in this example, but in most cases I wouldnt't. Only if I had to deal with some OSX specific file path probably and was required to monkey around with sysroot.\n\nThis function could do that.. it could do a lot of things most likely\n\n\n## An Extra Couple Scripts\n\n### Assuming you have a directory named repos in your home directory that you travel to often\nWith this you can begin typing a directory, then lazily or hastily hit \n\nControl + r + r\n\nThen fzf will popup with the word you were typing already into the search and you can select one of the repos you want to goto.\n\nThe only requirements for ALL of this functionality is  1. fzf binary:\n```\nbrew install fzf\n```\nand 1. zsh which comes standard with OSX now.\n\n```\n\nfunction goto_repos_dir_fzf() { \n  export CURRENTWORD=\"${LBUFFER/* /}${RBUFFER/ */}\"\n\n    Zle kill-word\n    Zle backward-kill-word\n\n  \n    if [ -z \"$CURRENTWORD\" ]; then\n    eval code \"$HOME/repos/$(ls ~/repos | fzf)\" \n  else \n    eval code \"$HOME/repos/$(ls ~/repos | fzf -q $CURRENTWORD)\" \n  fi\n}\nZle -N goto_repos_dir_fzf\nbindkey \"^re\" goto_repos_dir_fzf\n```\n\n\n### Killing Processes\n\nIf there are a few processes you need to get rid of. You could:\n\n```\n\nfunction kill_process_using_fzf() { \n  export CURRENTWORD=\"${LBUFFER/* /}${RBUFFER/ */}\"\n\n  Zle kill-word\n  Zle backward-kill-word\n\n  if [ -z \"$CURRENTWORD\" ]; then\n    sudo kill -9 $(ps -efc | fzf -m  | awk '{print $2}')\n  else \n    sudo kill -9 $(ps -efc | fzf -m -q $CURRENTWORD | awk '{print $2}')\n  fi\n}\nZle -N kill_process_using_fzf\nbindkey \"^pp\" kill_process_using_fzf\n\n```\n\nControl + p + p  now will bring up a nice menu where you can use the tab key to select multiple processes. On enter they will be killed.","slug":"niftyzshmemorytimecarpeltunnelsaver"},{"frontmatter":{"title":"Debugging a Rust process in VSCode by attaching to process - useful for say.. a terminal emulator","author":"Brad Barrows","date":"2020-12-20"},"markdownBody":"# Visual Studio Code launch.json\n\nYou will want to use something similar to:\n\n```\n{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"lldb\",\n            \"request\": \"launch\",\n            \"stopOnEntry\": true,\n            \"name\": \"Debug with LLDB\",\n            \"program\": \"${workspaceRoot}/target/debug/your_project_name\",\n            \"args\": [],\n            \"cwd\": \"${workspaceRoot}/\",\n            \"sourceLanguages\": [\n                \"rust\"\n            ],\n        },\n        {\n            \"type\": \"lldb\",\n            \"request\": \"attach\",\n            \"pid\": \"${command:pickMyProcess}\",\n            \"name\": \"Attach LLDB\",\n            \"program\": \"${workspaceRoot}/target/debug/your_project_name\",\n            \"sourceLanguages\": [\n                \"rust\"\n            ],\n        }\n    ]\n}\n```\n\nNOTE: You will wan to change the program property to point to your binary (from your_project_name to whatever your project is)!\n\nThat should be it though! ","slug":"rustvscodedebug"},{"frontmatter":{"title":"Using tmux to change directory with a mouse click","author":"Brad Barrows","date":"2020-12-15","hero_image":"/static/tmuxcd.gif"},"markdownBody":"# tmux config\n\nFirst off you are going to need to add the following to your tmux config ~/.tmux.conf:\n\n```\nbind -n DoubleClick1Pane { \n   setw -g word-separators ' @\"=()[]:'\n   run-shell -t 0 \"tmha #{mouse_word}\"\n}\n\nbind -n C-DoubleClick1Pane { \n   setw -g word-separators ' @\"=()[]:'\n   run-shell -t 0 \"tmhac #{mouse_word}\"\n}\n\n# Make it so when you Option Double Click on a word it is copied to the clip board - easier than selecting it usually\nbind -n M-DoubleClick1Pane { \n   setw -g word-separators ' @\"=()[]:'\nrun-shell -t 0 \"echo \\\"#{mouse_word}\\\" | pbcopy\"\n}\n\n\n```\n\nMake sure mouse mode is on:\n\n```\nset -g mouse on\n```\n\n### NOTE - I am using the latest build of tmux although this should only be necessary for the popup windows\n\n# Create some shell scripts\n\nI put the scripts in /usr/local/bin\n\n/usr/local/bin/tmha\n\n```\n#!/usr/bin/env zsh\n\n# tmux display-message \"Clicked on: $1\"\n\n# alias l='exa -a -a -l' \n# alias lx='exa -a -a -x' \n\nif [[ \"$1\" == \"package.json\" ]]; then\n    tmux send-keys -t \"$pane\" C-z \"cat package.json | jq -r '.scripts'\" Enter\n    tmux send-keys -t \"$pane\" C-z 'npm run-script $(cat package.json | jq -r \".scripts | keys[]\" | fzf)' Enter\nelif [[ \"$1\" == \"/Users/\"* ]]; then\n    tmux send-keys -t \"$pane\" C-z \"lx\" Enter\n    tmux send-keys -t \"$pane\" C-z \"code $1\" Enter\nelse \n    tmux send-keys -t \"$pane\" C-z \"if [ -d \"$1\" ]; then cd $1 \u0026\u0026 lx; else code $1; fi\" Enter\nfi    \n```\n\n/usr/local/bin/tmhac\n\n```\n#!/usr/bin/env zsh\n\n# alias l='exa -a -a -l' \n# alias lx='exa -a -a -x' \n\ntmux send-keys -t \"$pane\" C-z \"code $1\" Enter\n```\n\nNow whenever you double click on a file it will either try to run npm run-scripts if it is package.json, if it is a specific path then just open VSCode editor to that path, or if it is a direcory then cd to that directory and list all files.\n\nNote that Control clicking will lead to VSCode always being ran on the file clicked.\n\n\n## If you like this..\n\nThen checkout my [Alacritty Github Fork Releases](https://github.com/bebrws/alacritty-tabs/releases). I have a build of Alacritty that, when Command Click occurs, the word clicked is echoed into the terminal.\n\n","slug":"tmuxcd"},{"frontmatter":{"title":"Map and Reduce in the Shell with Javascript","author":"Brad Barrows","date":"2020-11-22"},"markdownBody":"# Javascript Eval : JEval\n\nI wanted the power of map and reduce in the shell. I want to use Javascript to manage this.\n\n```\n#!/usr/bin/env node\n\nconst readline = require('readline');\nconst evalString = process.argv[process.argv.length - 1];\n\nfunction evalInContext() {\n    eval(evalString);\n}\n\nvar rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n  terminal: false\n});\n\nrl.on('line', function (line) {\n  line.length \u0026\u0026 evalInContext.call(line);\n});\n\n```","slug":"jeval"},{"frontmatter":{"title":"Packateer - A new testing tool for testing one or more React Components using Puppeteer","author":"Brad Barrows","date":"2020-11-22"},"markdownBody":"# Packateer\n![Packateer](../static/packateerLogo.svg \"Packateer Logo\")\n\n# What is this?\n\nThis is a library which will take a filename (the entry argument) which should point to a page you have designed for testing.\nThen use webpack to compile that JSX/TSX file using WebpackDevServer. After compilation and hosting a puppeteer browser is created launching a headless Chrome instance and the page you provided in the initial step is loaded for testing with Jest or whatever testing library you prefer.\n\nThis is useful when you need to test interaction with React components that cannot be tested with available virtual DOM options. One such example is [shown below](#example): testing tabIndex.\n\n# Why is this useful?\n\nSay you have a or a few React components that you need to test some user interaction with. Say Drag-n-drop or tab ordering. Then this is a library you may want to give a look.\n\nIt allows you to craft a new tsx or jsx file with these components in whichever way you want and then use puppeteer to (and whichever test tool, say Jest) you want to test away.\n\n# Example\nYou can check the example_usage folder for an Example or click here [to see a full example in the README](#example-usage)\n\n# Explain the Example\nYou can take a component: [App.js For example](#appjs)\n\nCreate a file where you get to [layout one or more](#appsubpagejsx) components. The point of this package is to allow you to create these \"pages\" or \"subsections of sites\" that contain components you want to test and only those components. Why write a test that has to login and navigate around your site just to test a specific component when you couuld layout a few components in a new page and test only those components?\n\nIn the example below I am testing that pressing tab while viewing the page will traverse the HTML DIV elements as expected. The test starts by selecting the DIV with the id \"initial\". Then tabs down the DIV with the id \"second\".\n\nThis is an example of testing where I found virtual doms to fall short. Also, if time is not an issue with testing woudln't it be just that much better to test in a real browser?\n\nIf you have headless set to false then you can see the browser tab between DIVs in the example:\n![Packateer Example Video](../static/packateer.gif \"Packateer Example Video\")\n# Example Usage\n\n### App.test.js\n\n```\nimport { CreateServerAndClient } from 'packateer';\nimport * as path from 'path';\nimport * as util from 'util';\n\njest.setTimeout(50000); \n\n\nfunction findFocusedNodes(node) {\n  if (node.focused) {\n    return [node]\n  } else if (node.children \u0026\u0026 node.children.length) {\n    // Array.prototype.flatMap = function(mapFunction) { return this.map(mapFunction).reduce((a, c) =\u003e { return [ ...a, ...(Array.isArray(c) ? c : [c]) ]; }, []) }\n    return node.children.map(n =\u003e findFocusedNodes(n)).reduce((a, c) =\u003e { return [ ...a, ...(Array.isArray(c) ? c : [c]) ]; }, []);\n  } else {\n    return [];\n  }\n}\n\nasync function delay(delayTime) {\n  await new Promise((res, rej) =\u003e {\n    setTimeout(() =\u003e {\n      res(true)\n    }, delayTime)\n  });\n}\n\nlet [ppage, pserver, pbrowser] = [undefined, undefined, undefined];\n\ndescribe('test with pup', () =\u003e {\n  beforeAll(async () =\u003e {\n    const { port, server, browser, page } = await CreateServerAndClient(undefined, undefined, false, path.join(__dirname, 'App.subpage.jsx'), [path.join(__dirname, '../node_modules')]);\n    pserver = server;\n    ppage = page;\n    pbrowser = browser;\n    \n  })\n  \n  afterAll(() =\u003e {\n    pbrowser.close();\n    pserver.close();\n  })\n\n  test('renders learn react link', async () =\u003e {\n    await ppage.waitForSelector('#initial');\n\n    await ppage.focus(\"#initial\");\n    await delay(500);\n    let snapNode = await ppage.accessibility.snapshot();\n    let inFocus = findFocusedNodes(snapNode);\n    expect(inFocus.length).toEqual(1);\n    expect(inFocus[0].name).toEqual(\"initial\");\n\n    ppage.keyboard.press('Tab');\n    await delay(500);\n    snapNode = await ppage.accessibility.snapshot();\n    inFocus = findFocusedNodes(snapNode);\n    expect(inFocus.length).toEqual(1);\n    expect(inFocus[0].name).toEqual(\"First\");\n\n    ppage.keyboard.press('Tab');\n    await delay(500);\n    snapNode = await ppage.accessibility.snapshot();\n    inFocus = findFocusedNodes(snapNode);\n    expect(inFocus.length).toEqual(1);\n    expect(inFocus[0].name).toEqual(\"Second\");\n  });\n\n});\n```\n\n### App.subpage.jsx\n\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    \u003cApp /\u003e\n  ,\n  document.getElementById('root')\n);\n```\n\n\n### App.js\n\n```\n// import React from 'react'\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    \u003c\u003e\n    \u003cdiv id=\"initial\" tabIndex=\"0\"\u003einitial\u003c/div\u003e\n    \u003cdiv id=\"First\" tabIndex=\"0\"\u003eFirst\u003c/div\u003e\n    \u003cdiv id=\"Second\" tabIndex=\"0\"\u003eSecond\u003c/div\u003e\n    \u003cdiv className=\"App\"\u003e\n      \u003cheader className=\"App-header\"\u003e\n        \u003cimg src={logo} className=\"App-logo\" alt=\"logo\" /\u003e\n        \u003cp\u003e\n          Hey, this is a test.\n        \u003c/p\u003e\n        \u003ca\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        \u003e\n          Learn React\n        \u003c/a\u003e\n      \u003c/header\u003e\n    \u003c/div\u003e\n    \u003c/\u003e\n  );\n}\n\nexport default App;\n```","slug":"packateer"},{"frontmatter":{"title":"Spleeter - Cut/separate out levels into tracks from a song","author":"Brad Barrows","date":"2020-11-22"},"markdownBody":"## Where\n\nThe [Spleeter github repo](https://github.com/deezer/spleeter) is the place to go for installation instructions. For the most part you should be able to run the install instructions without anaconda if you have python3 installed. You might need to install pip3 as well.\n\nYou can get pip by either:   \n```\ncurl -O https://bootstrap.pypa.io/get-pip.py\n\n```\n\nOr the way nicer:\n```\nsudo python3 -m pip install -U pip\n```\n\nNote: you can install pip for Python 2 as well if needed:\n\n```\nsudo python2 -m pip install -U pip  \n```\n\nRemember to add the bin dir to your path if it is missing. \n\nI needed to add path for Python 2 but since Python 3 was installed with homebrew path was already setup to include /usr/local/bin.\n\nIf needed - add Python 2 pip to path:\n```\nexport PATH=\"$HOME/Library/Python/2.7/bin/pip:$PATH\"\n```\n\n\n\n## Install Spleeter\n\nClone it, create a virtual environment (meaning any packages you installed will only be installed in this \"virtal environment\". This allows you to install specific package versions without breaking anything globally/elsewhere that uses Python), and install dependencies.\n\nThis is partially from the site:\n\n```\ngit clone https://github.com/Deezer/spleeter \u0026\u0026 cd spleeter\npython -m venv spleeterenv \u0026\u0026 source spleeterenv/bin/activate\npip install\n```\n\nOne thing I did different is just skipped the virtual env. Otherwise everytime you want to use spleeter you need to run\n```\nsource ~/repos/spleeter/spleeterenv/bin/activate\n```\n\n~/repos/spleeter/ being the directory that I cloned the repo to.\n\nYou can skip the virtual environment and globally install with:\n\nJust a \n```\npip install\n# This will do the same thing as:\npython3 setup.py install\n# But it also installs dependencies\n# Then you will prob be missing a few\n```\n\nIf you are missing dependencies you may need:\n\n```\npip3 install musdb\npip3 install museval\npip3 install numpy==1.18.5\npip3 install scipy==1.4.1'\n```\n\nI have permissions set up so I don't need sudo to install packages globally. You may need to sudo here if you are not using a virtual environment. Another plus to \"virtual envs\" I should have mentioned.\n\n## Example Usage\n\n```\nfunction removeFileExtensionFromStdin() {\n  # Remove the first period and 0 and infinite characters (letters and numbers) comming after the period\n  # Meant to be used like:\n  # echo \"somefilename.mp3\" | removeFileExtensionFromStdin\n  sed 's/\\.[a-zA-Z0-9]\\{0,\\}//g'\n}\nalias extractFileExtensionOff=removeFileExtensionFromStdin\n\n\nfunction extractSong() {\n  DEFAULTFORMAT=\"mp3\"\n  format=\"${2:-$DEFAULTFORMAT}\"\n  woExtension=$(basename \"$1\" | removeFileExtensionFromStdin)\n  echo \"spleeter separate -p spleeter:5stems -i $1 -c $format  -o $woExtension\"\n  spleeter separate -p spleeter:5stems -i $1 -c $format  -o $woExtension\n}\n\n```\n\nNow go pick a favorite song and find an mp3 for it. I heard that youtube to mp3 converters work wonders when you need some scratch mp3 to work with.\n\nAfter downloading your mp3 you can run:\n\n```\nextractSong ~/Download/someSong.mp3\n```\n\nAnd then in your current directory you will have a folder named someSong with the track broken down to 5 levels.\n\nChange the \"5stems\" in the command to different numbers to change the number of tracks produced during separation.\n\nI was really impressed with the quality here. Especially after spending some time looking to see how hard it is to manually go and separate out different instruments from a track. It is NOT easy (wasn't do able for me knowing nothing about music mixing software).\n\n","slug":"spleeter"},{"frontmatter":{"title":"Modify String prototype for replaceAll","author":"Brad Barrows","date":"2020-11-14"},"markdownBody":"##  String replace all\n\n```\nString.prototype.replaceAll = function (find, replace) {\n  return this.replace(new RegExp(find, 'g'), replace);\n};\n```","slug":"stringreplaceall"},{"frontmatter":{"title":"Animating SVGs using CSS ( using Affinity Designer to create SVGs )","author":"Brad Barrows","date":"2020-11-01","pre_shark":true},"markdownBody":"# What is this?\n\nExample for creating an SVG in Affinity Designer and then exporting as an SVG and animating using CSS.\n\nI wanted to see how I could animate some of the SVGs I had been drawing using Affinity Designer.\n\nTo animate I am using CSS only.\n\n[My code is here](https://github.com/bebrws/shark-animation)\n\n# How?\n\nYou can name a group or single layer in AD (Affinity Designer). \nThis will set a CSS ID to the group name you have in AD.\n\nYou can then use CSS to transform or animate whatever you have the ID for.\n\nIn shark-animcation/index.html you can see how I animate using CSS.\n\nIf you open up the AD file here you can see I took my shark I had drawn as a solid object and broke up the path around the mouth. Then named everything I needed to move with a name ending in Head.\n\nThen I copied over the SVG into my html and was able to use the css IDs to animate. \n\n# CSS Code\n\nThe css code I used is pretty simple. Just an animation to move the mouth and another to move the shark. The way animations work in CSS I am able to set the inital state of an object. In this case the object is either the whole shark or different parts of the shark drawing. Then I can set the final state, or where I want to animate \"to\". And then set the time it takes to animate betweeen these two states and the acceleration in change used (I used linear here).\n\nThe CSS Code is :\n\n```\n\n\n  #wholeShark {\n      /* width: 500px; */\n      transform: translate(-400px, 0px);\n      animation: moveShark 2s linear forwards;\n  }\n  @keyframes moveShark {\n      to {\n          transform: translate(100px, 0px);\n      }\n  }\n\n  #SharkEyeHead, #SharkNoseStuffHead, #SharkStylHead, #SharkBackgroundHead {\n      transform: rotate(-6deg) translate(-105px, 190px);\n      animation: moveMouth .3s linear forwards;\n      animation-direction: alternate;\n      animation-iteration-count: infinite;\n  }\n\n  @keyframes moveMouth {\n      to {\n          transform: rotate(0deg) translate(0px, 0px);\n      }\n  }\n\n```\n\n## How does it look?\n\n[Click here to see it hosted on its own](https://bebrws.github.io/shark-animation/index.html)","slug":"shark"},{"frontmatter":{"title":"My Kubernetes aliases and functions using fzf","author":"Brad Barrows","date":"2020-10-21"},"markdownBody":"\n## The actual code\n\n```\n    alias kgp='kubectl get pods --all-namespaces'\n    alias kgs='kubectl get services --all-namespaces'\n\n    function kLogsAllContainers() {\n        kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}{\"\\t\"}{.metadata.name}{\"\\n\"}' | fzf --preview='echo {} | xargs kubectl logs -n'  --preview-window=up:80% | xargs kubectl logs -n\n    }\n    alias klogs=kLogsAllContainers\n\n    function kLogsContainer() {\n        # The first argument to this function should be the container name\n        kubectl get pods -o name | fzf --preview=\"kubectl logs {} --container $1 | tail -20\" --preview-window=up:80%\n    }\n\n    function kexSh() {\n        kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}{\"\\t\"}{.metadata.name}{\"\\n\"}' | fzf | read -r namespace pod\n        export container=$(kubectl get pod -n $namespace $pod -o jsonpath='{.spec.containers[*].name}' | fzf)\n        kubectl exec -n $namespace --stdin --tty $pod --container $container -- /bin/sh\n    }\n\n\n    function kexBash() {\n        kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}{\"\\t\"}{.metadata.name}{\"\\n\"}' | fzf | read -r namespace pod\n        export container=$(kubectl get pod -n $namespace $pod -o jsonpath='{.spec.containers[*].name}' | fzf)\n        kubectl exec -n $namespace --stdin --tty $pod --container $container -- /bin/bash\n    }\n\n    function kd() {\n        kubectl get $1 --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}{\"\\t\"}{.metadata.name}{\"\\n\"}' | fzf --preview=\"echo '{}' | xargs kubectl describe $1 -n\" | xargs kubectl describe $1 -n\n    }\n\n    function kdelete() {\n        kubectl get $1 --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}{\"\\t\"}{.metadata.name}{\"\\n\"}' | fzf | xargs kubectl delete $1 -n\n    }\n\n    alias kdpod='kd pod'\n    \n    alias kdelpod='kdelete pod'\n\n    alias kdservice='kd service'\n\n    alias kdelservice='kdelete service'\n\n    alias kg='kubectl get '\n    \n    function kgevents() {  kubectl get events --sort-by='.metadata.creationTimestamp'  }\n    alias kgev=kgevents\n\n```\n\n\n## Helpful Kubernetes Aliases and Functions Explained\n\nI use fzf pretty extensively. I really appreciate how much time it can save looking up something like an id or namespace which will just need to be copied into the next command.\n\nTo save time I created a number of alises and functions which work with Kubernetes' kubectl to help me get information about a cluster and also exec shells.\n\n### It begins.. \nIt starts off with some aliases to help with monotonous tasks like getting a specific column.\n\n### Then there are some helpful command to describe and delete resources\n\n![Describing pods](/static/kdpod.gif)\n\nYou could run:\n\n```\n    kd service\n```\nor\n```\n    kdservices\n```            \n\nFor pods:\n\n```\n    kd pod\n```\nor\n```\n    kdpods\n```            \n\n\n### To describe certain resources\n\nThe kd function will work with any resource type.\n\nSo\n\n```\n    kd ingress\n```\n\nwill even work to list all ingresses in all namespaces and then describe the one you select.\n\n\nCommand starting with kdel will delete resources.\n\n### Spawning a shell on a pod in a container\n\n![Spawning a shell on a pod in a container](/static/kexsh.gif)\n\nTo run a shell on a pod in a container run:\n\n```\n    kexBash \n```\n\nor \n\n```\n    kexSH\n```\n\nThese are pretty useful little functions.\n\nYou will be able to select the pod you want to a shell into, and then a secondary fzf selection will occur for the container.\n\n### Kubernetes Events\n\nThe last and mose useful of all these is probably just getting events in a sorted order (by timestamp).\n\nKubernetes events has helped me debug by far the majority of the more challenging Kubernetes issues I hace run into.\n\n```\n    kgevents\n```\n\n#### Why are events useful?\n\nWhen I run into frustrating issues with Kubernetes, things that I overlooked, I am usually able to pretty quickly figure out what I missed just by looking at the events being logged.\n\nFor example, if you are missing some secret or something needed for a volume to mount, that will show up in Kubernetes events if I remember correctly.\n\nI would deffinately recommend checking it out if you ever are stuck.\n","slug":"kubernetesAliasesFunctions"},{"frontmatter":{"title":"Javascript FlatMap Usage","author":"Brad Barrows","date":"2020-10-20"},"markdownBody":"## FlatMap is a great functional operation\n\nFlatMap can be implemented as follows:\n\n```\n    Array.prototype.flatMap = function(mapFunction) { return this.map(mapFunction).reduce((a, c) =\u003e { return [ ...a, ...(Array.isArray(c) ? c : [c]) ]; }, []) }\n```\n\nWhich is a method on Arrays (when implemented) which will do something akin to mapping over each value in an array, doing some operation, followed by a reduce step which then takes each object returned from that inital map step and if that object is an array, then flattens or spreads the array into the final resulting array (the reduce step's accumulator) if the current object from the map step is not an array then the object itself is added into the resulting array (which is again, the reduce steps accumulator). The reduce steps accumulator in this flatMap implementation is an empty array.\n\nThis is an example of just flattening an array of arrays without mapping:\n\n```\n     [[1], [2,3]].reduce((a, c) =\u003e { return [ ...a, ...c ]; }, [])\n```\n\nWhich will produce the same as the following. Here I have the map function returning the values from the array unchanged, removing the use of the map step, in an attempt to show how this is similar to the reduce example flattening arrays above:\n\n```\n    [[1], [2,3]].flatMap(x =\u003e x)\n```\n\nThis results in output:\n\n```\n    [1, 2, 3]\n```\n\n## Map, flatMap and the 1 to 1 vs 1 to many outputs\n\nFlatMap is great in my opinion because while with map you get to iterate over each value, doing some operation, with flatMap you can have your operation return any number of results. This removes to 1 to 1 constraint that you get between values and results when mapping over an array.\n\n## Convincing? examples of why flatMap is so great\n\n### You can now iterate over a list creating a new list with any number of values\n\nLet's say you have some need to take a list and get all variations of that list. You might normally make some array and forEach iterate over each item.\n\n\n```\n\n    const items = [\"book\", \"dog\"];\n    let variations = [];\n    items.forEach(item =\u003e {\n        variations.push(item);\n        variations.push(item + \"s\");\n    });\n```\n\nOr:\n\n```\n\n    const items = [\"book\", \"dog\"];\n    let variations = [];\n    items.forEach(i =\u003e variations = variations.concat([i, i + \"s\"]))\n```\n\nBut now with flatMap:\n\n```\n\n    const items = [\"book\", \"dog\"];\n    let variations = [];\n    items.flatMap(i =\u003e [i, i + \"s\"])\n```\n\n### Creating a list of all combinations of items in two lists\n\n```\n    [1, 3].flatMap(d =\u003e [2, 4].map(v =\u003e[d, v]))\n```","slug":"JSFlatMapUsage"},{"frontmatter":{"title":"Escaping Single Quotes Within Single Quotes in Bash and ZSH","author":"Brad Barrows","date":"2020-10-20"},"markdownBody":"## Escaping single quotes for Bash and ZSH\n\nWhile writing a bash/zsh function which used fzf I needed to use the string \"$1\" and \"$2\" without them being evaluated.\n\nI realize now that I could have probably just done: \"\\$2\"\n\nMy command (before realizing I didn't even need the awk command!) was:\n\n```\n    function kd() {\n        kubectl get $1 --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}{\"\\t\"}{.metadata.name}{\"\\n\"}' | fzf --preview='echo '\"'\"'{}'\"'\"' | awk '\"'\"'{print $1, $2}'\"'\"' | xargs kubectl describe pod -n' | awk '{print $1, $2}' | xargs kubectl describe $1 -n\n    }\n```\n\nAs I said above I could just have used double quotes for the awk command and escaped the dollar sign:\n\n```\n    function kd() {\n    kubectl get $1 --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}{\"\\t\"}{.metadata.name}{\"\\n\"}' | fzf --preview='echo '\"'\"'{}'\"'\"' | awk \"{print \\$1, \\$2}\" | xargs kubectl describe pod -n' | awk '{print $1, $2}' | xargs kubectl describe $1 -n\n    }\n```\n\nBut before realizing that, and yes, that I don't even need the awk command in the first place, I went about escaping the single quote like you can see in the first code excerpt above.\n\nI wanted to make a note that what is happening here is that I am ending the single quoted string, then starting a new string using double quotes which is tehn concatenated onto the first single quoted string.\n\nFor example:\n\n```\n    echo 'awk '\"'\"'{print $1, $2}'\"'\"''\n```\n\nis a valid statement which will echo out an awk command:\n\n```\n    awk '{print $1, $2}'\n```\n\nWhat I find interesting about this escaping is that I can actually concatenate strings of different type (single or double quote type) together just by placing them next to each other. \n\nAnd if it is not clear what is happening in that jumble of quotes:\n\n```\n    '\"'\"'\n```\n\nIs that it is ending the single quote string, then starting a double quote string which contains a single single quote. It then ends the new double quote string and started the single quote string back up again. Thereby insterting a single quote into a single quoted string.\n\n\n\n### The final commmand\n\nIf you are interested the final command without all the extra unnecessary commands and string escaping is:\n\n```\n    function kd() {\n        kubectl get $1 --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}{\"\\t\"}{.metadata.name}{\"\\n\"}' | fzf --preview='echo '\"'\"'{}'\"'\"' | xargs kubectl describe pod -n' | xargs kubectl describe $1 -n\n    }\n\n```","slug":"escapingSingleQuotes"},{"frontmatter":{"title":"Python List Comprehension in Javascript","author":"Brad Barrows","date":"2020-10-20"},"markdownBody":"## Getting something similar to Python style list comprehension in Javascript\n\nThe javascript spread operator opened my eyes to an easy way to get Python style list comprehension in Javascript.\n\nBy creating an array and spreading another array into it while doing some operation on the inner array we effectively have Python style list comprehension.\n\nFor example:\n\n```\n\n    const anArray = [1,2,3];\n    console.log([ ...anArray.map(x =\u003e x*2)]);\n\n```\n\nThis will print out:\n\n```\n    [ 2, 4, 6 ]\n```\n\nThe similar code in Python would be:\n\n```\n     [ n * 2 for n in [1, 2, 3] ]\n```\n\nI actually think that using spread is more readable in some ways. It all makes sense that you can piece together the spread operator with the functional style methods on Arrays to get the same functionality as a list comprehension in Python to me. I like that this \"problem\" is solved by a combination of basic Javascript functionality instead of creating a new syntax just to add functionality like a list comprehension as well.\n\n### Differences with the Python style list comprehension\n\nWhat I really like about this use of the spread operator in relation to the list comprehension is that you can mix and match the arrays you spread into the new array. With Python I do not believe it is possible to use a single list comprehension to do some ordered concatenation of multiple resulting arrays use a list comprehension.\n\nThis is a pretty useful, common operation which makes me appreciate the spread operator.\n\nFor example:\n\n```\n\n    const anArray = [1,2,3];\n    const anotherArray = [2,4,6];\n    console.log([ ...anArray.map(x =\u003e x*2), ...anotherArray.map(x =\u003e x/2)]);\n\n```\n\nThis will print out:\n\n```\n    [ 2, 4, 6, 1, 2, 3 ]\n```\n\nThe python code for this would require concatenating 2 seperate list comprehensions I believe.\n\nI know you can [iterate over multiple lists at the same time in Python](https://stackoverflow.com/questions/16568056/nested-list-comprehension-with-two-lists) but I don't believe you can perform operations on lists and then order the results in any specific manner like the example does above.\n\n## Python list comprehension using multiple lists\n\nIn Python you can create a list comprehension that results in the combination of every value from the different lists:\n\n```\n    [x + y for x in [1, 3] for y in [2, 4] ]\n```\n\nIn Javascript the closest I could get was:\n\n```\n    [1, 3].flatMap(d =\u003e [2, 4].map(v =\u003e d + v))\n```\n\n## Lists or iterables?\n\nYes, I am saying lists when referring to what the list comprehension is iterating over. Technically, this would be any object which is iterable. An [explanation to what makes an object iterable](https://wiki.python.org/moin/Iterator).","slug":"pythonListComprehensionsInJS"},{"frontmatter":{"title":"Conways Game Of Life and the Rust GFX Library","author":"Brad Barrows","date":"2020-10-06","hero_image":"/static/golgfx.gif"},"markdownBody":"## Why?\n\nI am trying to learn more about Rust and how Alacritty is so fast. This is also an attempt to explore the many different Rust graphics libraries.\n\nThis post is about [gfx](https://github.com/gfx-rs/gfx).\n\nWith gfx I managed to get the FPS I was looking for for this Game Of Life implementation.\n\n[My code is here](https://github.com/bebrws/gol-gfx)\n\n## How does it look?\n\n![image of game of life run](../static/golgfx.gif)\n","slug":"rust-gfx-gol"},{"frontmatter":{"title":"Conways Game Of Life and the Rust NVG Library","author":"Brad Barrows","date":"2020-10-01","hero_image":"/static/gol.gif"},"markdownBody":"## Why?\n\nSo I have been crazy impressed with how fast Alacritty is. And I want to know more.\n\nI know I read somewhere that one of the libraries that Alacritty uses (or maybe it was just a random Rust OpenGL based library) actually does some cool React style tricks to improve performance. Something about diffing changes so that it know what changed and only re renders what it needs to.\n\nThis combined with the speed of the OpenGL Graphics pipeline must be what gives Alacritty so much awesomeness. Other than the quality Rust code that the author wrote of course.\n\nSo I wanted to play around with some of these Rust graphics libraries and see if I could find a fast, easy to use way to:\n    * Render 2D text\n    * Render 2D images\n\nThis is actually much harder then it sounds. Due to the fact that all fast graphics rendering is going to have to be done in a 3D environment. Meaning something like OpenGL. This means that something which sounds simple, such as drawing an image or rectangle to the screen, is now challenging to implement.\n\nTo draw an image for example you end up having to draw multiple triangles, loading a texture, mapping the texture to the triangles and rendering that. Not too mention all the insane amount of work it takes to just setup up the 3D environment when all you want to do is to render 2D images/shapes..\n\nSo to get going on this I choose to implement a Conway's Game Of Life app.\n\nIn searching through libraries I stumbled upon the Rust nvg library.\n\nThis library is pretty awesome. It has an insanely easy to use API and very powerful.\n\nThe big downside for me though is that it is very slow. Try out my Game of Life implementaiton and you'll see you end up with 20 FPS on a good laptop in 2020.\n\n## What's next?\n\nOn to the next library.\n\nI have a square rendering using [rendy](https://github.com/amethyst/rendy) which is using [gfx-hal](https://github.com/gfx-rs/gfx) underneath and is very fast. I am stuck on fixing the projection so that my aspect ratio isn't out of whack for full screen which I want.\n\nOther choices look to be:\n    * [Conrod](https://github.com/PistonDevelopers/conrod)\n    * Lower level [Piston](https://github.com/PistonDevelopers/piston-examples)\n    * Lower Level [GFX](https://github.com/gfx-rs/gfx)\n    * [Rendy](https://github.com/amethyst/rendy)\n\n\n\n## How does it look?\n\n![image of game of life run](../static/gol.gif)\n\n## Code\n\n[My code is here](https://github.com/bebrws/gol-nvg)\n\n## Amendment\n\nIt turns out that these 2 repos/crates do everything I am looking for:\n    * [General Piston Guide](https://github.com/PistonDevelopers/Piston-Tutorials/blob/master/getting-started/readme.md)\n    * [Piston OpenGL graphics](https://github.com/PistonDevelopers/opengl_graphics)\n\n    ","slug":"rust-nvg-gol"},{"frontmatter":{"title":"Alacritty - A Fast OSX Terminal","author":"Brad Barrows","date":"2020-9-17","hero_image":"/static/alacritty.gif"},"markdownBody":"## Alacritty\nAlacritty is the fastest GPU accelerated terminal emulator for OSX I have used.\n\nThe only reason I hadn't tried it or used it very much before was the learning curve \nof a new terminal emulator and it's lack of tabs.\n\nLuckily I was able to figure out how to make a great tmux and alacritty configuration \nfile along with some nice bash functions to help with editing the configurations.\n\n## Setting up Alacritty using my build\n\nDownload the terminal here: [Alacritty releases](https://github.com/alacritty/alacritty/releases)\n\nI was checking out the code made some changes [here](https://github.com/bebrws/alacritty-tabs/releases/download/0.6.0-dev-brads/Alacritty.zip) \nThe only difference really was adding an \"Always On Top' action. The keyboard combo for this will \"Command Shift A\".\n\n## Setting up Alacritty using my tmux and alacritty config\n\nNext clone my [configuration files](https://github.com/bebrws/myalacritty)\n```\ngit clone git@github.com:bebrws/myalacritty.git\ncd myalacritty\ncp tmux.conf ~/.tmux.conf\nmkdir -p ~/.config/alacritty/\ncp * ~/.config/alacritty/\nwget http://bradbarrows.com/dls/jsin.zip\nunzip jsin.zip\nmv jsin /usr/local/bin/jsin\n\n```\n\n## Bash/ZSH functions\nAdd these functions to your .zshrc\n\n```\n\n######### ALACRITTY GOOODNESS ############\nalias -g alacrittycolors='python3 $HOME/Library/Python/3.8//lib/python/site-packages/alacritty_colorscheme/cli.py '\n# To use run: alaFontSize 12\nfunction alaFontSize() {\n    cat ~/.config/alacritty/alacritty.yml | jsin --yaml --yamlout --whole \"(l.font.size=Number(\\\"$1\\\")) \u0026\u0026 l; \" \u003e $HOME/.config/alacritty/alacritty.yml.tmp\n    mv $HOME/.config/alacritty/alacritty.yml.tmp $HOME/.config/alacritty/alacritty.yml\n}\n# To use run: alaOpacity 0.8\nfunction alaOpacity() {\n    cat ~/.config/alacritty/alacritty.yml | jsin --yaml --yamlout --whole \"(l.background_opacity=Number(\\\"$1\\\")) \u0026\u0026 l; \" \u003e $HOME/.config/alacritty/alacritty.yml.tmp\n    mv $HOME/.config/alacritty/alacritty.yml.tmp $HOME/.config/alacritty/alacritty.yml\n}\n# To use run: alaColorTheme\n# Must run: sudo pip3 install alacrittycolors\n# before using\n# Also make sure jsin is installed from above or: https://github.com/bebrws/jsin\nfunction alaColorTheme() {\n   export ALABASE=$(python3 -m site | grep site | grep packages | head -n 1 | jsin \"l.replace(/\\s*\\'/g, '').replace(/,/g, '')\")\n   python3 $ALABASE/alacritty_colorscheme/cli.py -a ~/.config/alacritty/colors/$(ls  ~/.config/alacritty/colors/ | fzf --preview \"python3 $ALABASE/alacritty_colorscheme/cli.py -a ~/.config/alacritty/colors/{} \u0026\u0026 htop\")\n}\nfunction alaResetDark()  {\n  cp ~/.config/alacritty/alacritty.yml.dark ~/.config/alacritty/alacritty.yml\n}\nfunction alaResetLight()  {\n  cp ~/.config/alacritty/alacritty.yml.light  ~/.config/alacritty/alacritty.yml\n}\n\n```\n\n## Keyboard shortcuts\n* You should end up with tabs that you can click on just like Terminal.app and then can use the keyboard shortcuts \"Shift-Left or Right arrow key\".\n* \"Control-b then c\" - Create a new tab\n* \"Control-b then f\" - Create a horizonal window in the tab\n* \"Control-b then v\" - Create a veritical window in the tab\n* \"Alt-Left or Right arrow key\" - Move between split windows in the tab\n* \"Command-Shift-A\" - Keep Alacritty always on top\n* \"Command-Shift-F\" - Full screen\n* \"Command-Shift-=/-\" - Font size\n\nAll the control and alt backspace and arrow key bindings should work out of the box!\n\nYou will end up with this beautiful terminal:\n\n![Alacritty in action](/static/alacritty.gif)","slug":"Alacritty"},{"frontmatter":{"title":"Chrome Extension to Fuzzy Search Bookmarks and History","author":"Brad Barrows","date":"2020-9-07","hero_image":"/static/chrome-bookmark-history-search-ex-usage.gif"},"markdownBody":"## A Chrome extension to fuzzy search through bookmarks and history\n\nMy [chrome extension](https://github.com/bebrws/chrome-omnibox-bookmark-history-search) uses the same fuzzy string search algorithm I came up with for [FZNim](https://github.com/bebrws/fznim) and for this site.\n\nOn load of the extension it will create a table of bookmarks to urls and as the user types in the omnibar (following the keyword \"dl\") will fuzzy string search the omnibar text against bookmarks and grab the first few, highest ranking results. It then appens on a few results from the Chrome history when searched for the same term.\n\nI didn't see any lightweight Chrome Extensions that provided this functionaliy. This extension weighs in at under 150 lines of code.\n\n### Fuzzy String Search algorithm\n\nThe fuxxy string search algorithm weighs characters in a row and showing up early on in the string very heavily.\n\n### Usage:\n\n![An animated gif of the usage of the chrome extension](/static/chrome-bookmark-history-search-ex-usage.gif)\n\n### Install\n\nThe extension can be downloaded [from the Google Web Store](https://chrome.google.com/webstore/detail/bookmark-history-fuzzy-se/ahckmbemdipobmogmbpmbailnhfpjnbm?hl=en\u0026authuser=0)","slug":"chromeSearchExtension"},{"frontmatter":{"title":"Creating a keyboard shortcut to console log the selected javascript expression in VSCode","author":"Brad Barrows","date":"2020-9-07"},"markdownBody":"## Creating a keyboard shortcut to console log the selected javascript expression in VSCode\n\nCommand Shift P -\u003e Configure User Snippets -\u003e Create New\n\n```\n{\n\t// Console log the selected expressinn\n\t\"consolelog\": {\n\t\t\"scope\": \"javascript, typescript\",\n\t\t\"prefix\": \"consolelog\",\n\t\t\"body\": [\n\t\t\t\"console.log(`$TM_SELECTED_TEXT - ${$TM_SELECTED_TEXT}`);\",\n\t\t\t\"$TM_SELECTED_TEXT$2\"\n\t\t],\n\t\t\"description\": \"Console log the selected expression\"\n\t}\n}\n```\n\nCommand Shift P -\u003e Open Keyboard Shortcuts (JSON)\n\n```\n[\n    { \n        \"key\": \"cmd+ctrl+c\",        \n        \"command\": \"editor.action.insertSnippet\",\n        \"when\": \"textInputFocus\",\n        \"args\": {\n            \"name\": \"consolelog\"\n        }\n    },\n]\n```\n\n","slug":"consolelogvscode"},{"frontmatter":{"title":"Convert any video format to a gif","author":"Brad Barrows","date":"2020-9-07"},"markdownBody":"## Converting any video format supported by ffmped to a gif\n\nI have 2 helpful bash/zsh functions I use often.\n\nThe first one uses gifsicle to compress the gif further and remove some frames. The second shouldn't have as much loss.\n\n```\nfunction convertMov2Gif() {\n  ffmpeg -i $1 -pix_fmt rgb8 -r 10 $1.gif \u0026\u0026 gifsicle -O3 $1.gif -o $1.gif \n}\nalias mov2gif=convertMov2Gif\n\nfunction video2gifNoLoss() {\n  ffmpeg -i $1 -pix_fmt rgb8 $1.gif \n}\n```\n\nTo use to convert a mp4 to a gif:\n```\nvideo2gifNoLoss someVideo.mp4\n```\n\nOr convert a mov to a gif:\n```\nvideo2gifNoLoss someVideo.mov\n```\n\nRequires:\n\n```\nbrew install gifsicle ffmpeg\n```","slug":"videoToGif"},{"frontmatter":{"title":"Chrome Debugger Window always on top script","author":"Brad Barrows","date":"2020-9-06"},"markdownBody":"## Keep your Chrome Dev Tools Debugger on top of all windows on OSX Catalina\n\n![An animated gif of the usage of these scripts](/static/ChromeDevToolsOnTop.gif)\n\nI was getting tired of having to search for my Chrome Dev Tools Debugger window and thought I would see how hard it would be to write a dylib I could\nadd as a dylib load instruction eventually to my Google Chrome binary.\n\nI eventually will make a script and dylib that does all this but for now I wrote a quick frida-cycript script to take care of this.\n\n### Issues I encountered\n\nSo for some reason.. sometimes.. I can't use \n```[NSApplication shared]```\nto get a reference to the main application. I am not sure why this is for some programs.\n\nOne way I thought of around this is to just use the heap!\n\nHere we will search for all NSApplication instances in the heap and grab the last one we find (there should only be one).\n\n```var a;\nObjC.choose(ObjC.classes.NSApplication, {\n    onMatch: function (aarg) {\n        a = aarg;\n    },      \n    onComplete: function () {    \n        console.log('Done searching for NSApplication.');    \n    }      \n});  \n\n```\n\nI did a similar trick with this script since I couldn't do a NSApplication.windows or mainWindow or keyWindow on Google Chrome without it crashing:\n\n```\nvar ws=[];\nObjC.choose(ObjC.classes.NSWindow, {\n    onMatch: function (aarg) {\n        ws.push(aarg);\n    },      \n    onComplete: function () {    \n        console.log('done');    \n    }      \n});  \n```\n\nJust creates a list of all the Windows.\n\nI then checked out the class names and titles one by one.\n\nI noticed that Chrome will crash when I even check the title of some of these windows so I had to write my filter functions in a specific order.\n\nThen I set the window level to always be on top finally.\n\nThe code is below:\n\n```\nvar ws=[];\nObjC.choose(ObjC.classes.NSWindow, {\n    onMatch: function (aarg) {\n        ws.push(aarg);\n    },      \n    onComplete: function () {    \n        console.log('done');    \n    }      \n});  \n\nvar possibleWindows = ws.filter((w) =\u003e w.className().toString() === \"NativeWidgetMacNSWindow\")\nvar devToolWindows = possibleWindows.filter((w) =\u003e w.title().toString().includes(\"DevTools\"))\ndevToolWindows.forEach((w) =\u003e {\n    w.setLevel_(9);\n});\n\n```\n\n### To use:\n\n\nRun:\n\n```\nfunction toppid() { ps -ef | grep $1 | grep -v grep | awk '{ if (NR == 1) print $2 }'  }\nsudo cycript -p `toppid \"Google Chrome.app\"` keepDevToolsOnTop.cy\n```\n\n\nNOTE:\n\n* Requires SIP be disabled\n* [frida-cycript](https://github.com/nowsecure/frida-cycript/releases) installed \n\n","slug":"chromeDevTools"},{"frontmatter":{"title":"Github Repository Statistics command line tool grst","author":"Brad Barrows","date":"2020-9-04"},"markdownBody":"# Github Repository Statistics\n\nI wanted a VERY simple way to view Github statistics for all my public repos and couldn't find a tool to do this.\nEspecially nothing lightweight and without a bunch of dependencies I didn't want to install.\n\nThis command line tool: \n```grst```\nwill list all your public repos on the command line with all of the available traffic\nstatistics.\n\nThis includes number of clones, views, referrer information and paths.\n\nAt the very end a sorted list of repos by clone and view count is also listed.\nJust to make it easy to figure out which repo from the first printout you might want to review.\n\nIn order to use this either set the environment variables\n```GITHUB_USERNAME```\nand\n```GITHUB_TOKEN```\nor just answer the prompts.\n\nThe repository is at: [githubRepoStatistics](https://github.com/bebrws/githubRepoStatistics)\n\nHere is an image showing the tail end of the output:\n\n![An image of the output of grst](/static/reposSorted.png)\n\nTo use run:\n\n```\nnpm install -g githubRepoStatistics\ngrst\n```","slug":"githubStats"},{"frontmatter":{"title":"Find recently updated Github forks and clones with the command line tool gfnfs","author":"Brad Barrows","date":"2020-9-04"},"markdownBody":"# Up to date Github Forks and Repositories with gfnfs\n\nI was getting tired of clicking through all the forks for a repo then looking for the commits to find which ones were up to date so I wrote a command line utitlity to do it for me.\n\nThe repository is at: [githubFindNewestForks](https://github.com/bebrws/githubFindNewestForks)\n\nHere is an image showing the tail end of the output:\n\n![An image of the output of gfnfs](/static/githubfindforks.png)\n\nTo use run:\n\n```\nnpm install -g github-find-newest-forks\ngfnfs\n```","slug":"githubforks"},{"frontmatter":{"title":"addAlias - taking notes and improving productivity","author":"Brad Barrows","date":"2020-8-31"},"markdownBody":"## A most useful, simple bash function\n\nA year or two ago I came up with a very simple bash/zsh function which I really like.\n\nIt is addAlias.\n\nAll it does is take the first argument, a string representing the new alias name, and a second argument being a string repsenting the alias itself.\n\nIt then echos this into a file which I source in my .zshrc\n\nThe great part about this is that I can be working throughout the day and come across some command line tool or collection of commands that are very useful and not have to write them down or remember them.\n\nI just addAlias them, like:\n\naddAlias gitListUntrackedFiles 'git ls-files --others --exclude-standard'\n\nThen when I forget how to do that git command that lists untracked files I just type git then hit tab a few times. Then this option will appear and I can select it from the list. Saving a ton of time.\n\nTo use this add the following to your .zshrc\n\n```\nfunction addAlias() {\n  echo \"alias $1='$2' \"\n  echo \"alias $1='$2' \" \u003e\u003e  $HOME/myaliases.zsh\n  echo \"\" \u003e\u003e  $HOME/myaliases.zsh\n  source $HOME/myaliases.zsh\n}\n\nsource $HOME/myaliases.zsh\n\n```\n\nAs you can see it also echos out the alias after you are done so you can make sure no bad string escaping happened.","slug":"addAlias"},{"frontmatter":{"title":"FZNim - My fzf like library and clone writtin in Nim","author":"Brad Barrows","date":"2020-8-30","hero_image":"/static/fznim.gif"},"markdownBody":"## Introducing FZNim\n\nI love fzf\n\nIt has become, by far, the most useful \"new\" command line tool I have. It can be a godsend when it comes to searching through.. anything. A good example is files and directories.\n\nI always setup a folder named \"repos\" on my laptop where I store all my code repositories. Because of this I am constantly cd ing into this folder then cd ing into a specific repo folder to start work on a project.\n\nSometimes I cant rememeber the exact name of a repo or am just feeling lazy and now can save time and mental energy with a quick:\n\n```\n\nfunction cdr() {\n\tcd ~/repos/$(ls ~/repos | fzf)\n}\n\ncdr\n```\n\nWith this command I can roughly type the repo I am looking for and jump into my project from anywhere on my laptop. I like this tool so much I thought there would be some use cases that weren't easy to script with fzf.\n\nMaybe you have some more complicated input and output requirements than what can be done with a bash or zsh array of string.\n\nHere is my [Nim clone of fzf, named FZNim](https://github.com/bebrws/fznim) (which can be used as a Nim and therefore C and Objective-C library):\n\n![An animated gif of the fzf like usage of fznim](/static/fznim.gif)\n\nI am working on some more useful fzf like ideas right now an hopefully will have something to show for it soon.\n\n## FZNim code\n\n### Interesting Issues\nI ran into a few interesting issues. Like problems [getting keyboard input after piping in input into STDIN](/post/GettingSTDINAfterPipe) or needing to write [my own fuzzy string search in nim](/post/nimFuzzySearch).\n\n### Terminal Colors\nColoring the terminal output actually ended up being pretty easy.\n\nTo get the escape code right I needed to use: \"\\e[1;\" instead of \"\\033[0;\"\n\nTo print out a string hello in blue in nim you could use:\n\n```\necho \"\\e[1;34mhello\\e[00m\"\n```\n\n### NCurses or not\n\nI thought about using ncurses here but saw there is a nice terminal import in the Nim standard library\n\nWith this I could set cursor position (setCursorPos) and clear the screen (eraseScreen). This was really all I needed.","slug":"FZNim"},{"frontmatter":{"title":"Writing a fuzzy string search algorithm in Nim","author":"Brad Barrows","date":"2020-8-30"},"markdownBody":"## Introducing FZNim\n\nI needed a fuzzy string search algorithm for my fzf like library and this website's gimmicky search bar.\n\nI did see that the Nim documentation actually has an implementation which is used for searching their documentation.\n\nI tried this and I actually ran into a few issues. It also didn't quite get the results I expected. Which just felt bad.\n\nSo I wrote my own:\n\n```\nproc fzfuzzyMatch*(pattern: string, str: string, longestItemLength: int) : tuple[score: int, matched: bool, item: string] =\n  var\n    strIndex = 0\n    patIndex = 0\n    lastCharMatchedScore = 0\n    score = 0\n    numInRow = 0\n\n  while (strIndex \u003c str.len) and (patIndex \u003c pattern.len):\n    var\n      patternChar = pattern[patIndex].toLowerAscii\n      strChar     = str[strIndex].toLowerAscii\n\n    # Ignore certain characters\n    if patternChar in {'_', ' ', '.'}:\n      patIndex += 1\n      continue\n    if strChar in {'_', ' ', '.'}:\n      strIndex += 1\n      continue\n\n    if strIndex == 0 and patternChar == strChar:\n      score += longestItemLength\n      lastCharMatchedScore += 2\n      patIndex += 1\n      strIndex += 1\n      numInRow += 1\n    elif strChar == patternChar:\n      score += int(longestItemLength/strIndex) * (if numInRow == 0: 1 else: (numInRow * 3))\n      numInRow += 1\n      strIndex += 1\n      patIndex += 1\n    else:\n      if not (str[strIndex] in {'_', ' ', '.'}):\n        numInRow = 0\n      strIndex += 1\n      \n\n  result = (\n    score:   max(0, int(score)),\n    matched: (int(score) \u003e 0),\n    item: str\n  )\n```\n\nThis is actually or obviously VERY simple.\n\nThe fzfuzzyMatch function takes two arguments pattern and str.\n\npattern in the string representing the search string you would be typing in and str would be one of the string from a list of strings you want to search over.\n\nMy algorithm weights the results based on the matched character's position in the string and requires the length of the longest string being searched. This is passed in via longestItemLength.\n\nAll it does it iterate over both the pattern and str string at the same time. Both are converted to lowercase to prevent any upper lower case search issues.\n\nThen it takes the first charcter in the pattern string (from the search box) and checks the first character in str for a match. If the first character matches the score has longestItemLength added to it. This if statement is on line 22.\n\nThe score is just a value we keep adding to as matches happen to rate a string higher or lower in the overall search rankings.\n\nThe next elif is when a character is matched that is not the first character. Here the score has the longestItemLength/strIndex * numInRow added to it.\n\nlongestItemLength/strIndex is just a value that becomes smaller as the matches character moves farther down the string (to the right).\n\nnumInRow is the number of characters matched in a row. If a character match is missed then this is reset.\n\nThat is basically it!\n\nPretty simple and provides some pretty nice results.  If you check out the example in fznim you can see it highlight the matched characters which is a nice way to visualize some of this too.\n\nTo run this example you could checkout the repo and compile it with:\n\n```\ngit clone git@github.com:bebrws/fznim.git\ncd fznim\nnimble install -y; nim c examples/fzf.nim; cat fznim.nim | ./examples/fzf \n```\n\n","slug":"nimFuzzySearch"},{"frontmatter":{"title":"Nim Documentation Chrome Extension","author":"Brad Barrows","date":"2020-7-01"},"markdownBody":"\nI created a [Chrome Extension to search the Nim documenation from the Chrome Omnibar](https://chrome.google.com/webstore/detail/nim-language-omnibar-sear/melbldfjlacnhdbjbhbhlglaacgjnbgl?hl=en)\n\nTo get this to work I needed both a background script and a content script:\n\n```\n{\n  \"manifest_version\": 2,\n  \"icons\": { \n    \"16\": \"nim16.png\",\n    \"48\": \"nim48.png\",\n   \"128\": \"nim128.png\" \n  },\n  \"name\": \"Nim Language Omnibar Search\",\n  \"description\": \"This extension will allow you to search the nim documentation by using the keyword 'nim' before a search in the omnibar.\",\n  \"version\": \"0.0.4\",\n  \"browser_action\": {\n    \"default_icon\": \"./nim.png\"\n  },\n   \"content_scripts\": [ {\n      \"all_frames\": true,\n      \"js\": [ \"content.js\" ],\n      \"matches\": [ \"http://nim-lang.org/*\", \"https://nim-lang.org/*\" ],\n      \"run_at\": \"document_end\"\n   } ],\n  \"permissions\": [     \n    \"tabs\",\n    \"http://nim-lang.org/*\", \n    \"https://nim-lang.org/*\"\n  ],\n  \"omnibox\": { \"keyword\" : \"nim\" },\n  \"background\": {\n    \"scripts\": [\n      \"background.js\"\n    ]\n  }\n}\n\n```\n\nThe background script just listens for messages from the omnibar and sets the url to the Nim documentation page with a hash variable set to be the search value from the chrome omni bar:\n\n```\nchrome.omnibox.onInputEntered.addListener(function (text) {\n    const url = `https://nim-lang.org/docs/lib.html#search=${text}`;\n    console.log(\"nim extension background script just recieved text ${text} and is redirecting the current tab to: ${url}\");\n    chrome.tabs.update({ url: url });\n});\n```\n\n\nThe content script is where most of the work is done\n\n```\nfunction getObjectForURLHashValues()  {\n  // This is from:\n  // https://stackoverflow.com/questions/23699666/javascript-get-and-set-url-hash-parameters\n  var hash = window.location.hash.substr(1);\n\n  var result = hash.split('\u0026').reduce(function (result, item) {\n      var parts = item.split('=');\n      result[parts[0]] = parts[1];\n      return result;\n  }, {});\n\n  return result;\n}\n\n\nconsole.log('nim extension content script loaded.');\n\nfunction run() {\n  console.log('nim extensino content script can see the DOM is loaded');\n\n\n  // Don't actually start this whole process if the search  hash is not in the URL\n  const hashKeyValueObject = getObjectForURLHashValues();\n  if (\"search\" in hashKeyValueObject) {\n    // var actualCode = `chrome.tabs.sendMessage(tabId, { source: window.search.toString() }, (resp) =\u003e { console.log('Recieved response', resp); });`  \n    var actualCode = `window.postMessage({ type: \"FROM_NIM_DOCS\", source: window.search.toString() }, \"*\");`;\n    \n    // This code injection is from:\n    // https://stackoverflow.com/questions/9515704/insert-code-into-the-page-context-using-a-content-script\n    document.documentElement.setAttribute('onreset', actualCode);\n    document.documentElement.dispatchEvent(new CustomEvent('reset'));\n    document.documentElement.removeAttribute('onreset');\n\n    var script = document.createElement('script');\n    script.textContent = actualCode;\n    (document.head||document.documentElement).appendChild(script);\n    script.remove();\n  }\n}\n\nif(document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded',run);\n} else {\n    run();\n}\n\nwindow.addEventListener(\"message\", function(event) {\n  if (event.source != window)\n      return;\n\n  if (event.data.type \u0026\u0026 (event.data.type == \"FROM_NIM_DOCS\")) {\n      console.log('nim extension content script recieved a message from the page.');\n      console.log(`nim documentation is using the following function to search: event.data.source`);\n\n      const searchFunctionSource = event.data.source;\n      const doSearchWithParens = searchFunctionSource.match(/dosearch_[a-zA-Z0-9_-]*\\(+/g)[0];\n      const doSearchunctionName = doSearchWithParens.substring(0, doSearchWithParens.length-1);\n\n      const replaceFunctionWithParens = searchFunctionSource.match(/replace_by_id_[a-zA-Z0-9_-]*\\(+/g)[0];\n      const replaceFunctionName = replaceFunctionWithParens.substring(0, replaceFunctionWithParens.length-1);\n\n      const hashKeyValueObject = getObjectForURLHashValues();\n      console.log(hashKeyValueObject)\n\n      const searchStringFromURL = hashKeyValueObject.search;\n\n      // Now i just need to inject a call to:\n      // replace_by_id_10926172(\"tocRoot\", dosearch_11005547(searchStringFromURL));\n      var actualCode = `${replaceFunctionName}(\"tocRoot\", ${doSearchunctionName}(\"${searchStringFromURL}\"))`;\n\n      console.log(`nim extension content script is injecting JS to perform search operation for term ${searchStringFromURL}:`, actualCode);\n    \n      var script = document.createElement('script');\n      script.textContent = actualCode;\n      (document.head||document.documentElement).appendChild(script);\n      script.remove();\n  }\n});\n```\n\n\n\nIt starts off after document load by getting the javascript source for the search function. I didn't want to try and send events to the DOM to trigger a search (and since the search is all client side I cant make a GET or POST request to some API). \n\nThe other issue is that the search javascript is generated by Nim from Nim code. This means that the generate javascript function names can change.\n\nTo make this future proof I just use a regex to search for parts of the function names that wont change.\n\nOnce I find the functions for replacing the DIV with the new search output (replaceFunctionName) and triggering a search itself (doSearchunctionName) I trigger an actual search:\n\n```\n      var actualCode = `${replaceFunctionName}(\"tocRoot\", ${doSearchunctionName}(\"${searchStringFromURL}\"))`;\n\n      console.log(`nim extension content script is injecting JS to perform search operation for term ${searchStringFromURL}:`, actualCode);\n    \n      var script = document.createElement('script');\n      script.textContent = actualCode;\n      (document.head||document.documentElement).appendChild(script);\n      script.remove();\n\n```\n\nOne other tricky part is that Chrome Extension content scripts normally don't have access to the global context and therefore window.\n\nTo get access to this I injext javascript into the page which will post a message to a message handler I have setup in the content script.\n\nThe message post sends the javascript source for the search function:\n\n```\n\n    var actualCode = `window.postMessage({ type: \"FROM_NIM_DOCS\", source: window.search.toString() }, \"*\");`;\n    \n    // This code injection is from:\n    // https://stackoverflow.com/questions/9515704/insert-code-into-the-page-context-using-a-content-script\n    document.documentElement.setAttribute('onreset', actualCode);\n    document.documentElement.dispatchEvent(new CustomEvent('reset'));\n    document.documentElement.removeAttribute('onreset');\n\n    var script = document.createElement('script');\n    script.textContent = actualCode;\n    (document.head||document.documentElement).appendChild(script);\n    script.remove();\n```\n\nThe message handler does the function name searching and executing of the search.","slug":"NimOmniBarSearch"},{"frontmatter":{"title":"Ish","author":"Brad Barrows","date":"2020-6-6"},"markdownBody":"\n## Studying Ish\n\nand [x86UserModeEmu](https://github.com/bebrws/x86LinuxUserModeEmu)\n\n### The summary\n\nI have always been interested in Operating Systems, Compilers, Languages, Linux, Emulators, etc etc.. But there really isn't a ton of information about how to go from knowing nothing to writing any one of these things. At least including the intermediate subjects. At some point, I guess we really just have to and are expected to read source code.\n\nI read over a bunch of similar projects, learning about how these things were working from a high level. I really delved into JSLinux for example. It was taking a lot of time though and I wasn't very happy with what I thought I was getting out of it. I thought it would be nice to focus my efforts on something that I can actually use and that has unobfuscated code, some documentation, etc.\n\nIsh met these standards. It is also easy to debug and instrument which was helpful.\n\nAt some point I realized that Ish is way more than just an emulator. It, in my humble opinion, is really almost like an entire x86 user mode emulator and an entire Linux kernel (running on top of the iOS API) all in one (kind of crossing off 2 items from the list of things I was interested in). It is really amazing that the vast majority of this was written by one person.\n\nReading though Ish and looking for a place to start.. learning.. doing anything was tough at first. I realized that the JIT was just beyond me at this point (although I got the basic concepts, I wouldn't be able to write my own from what I read). I found that an interpreted version of Ish was still included in the code that didn't seemed to be in use any more and decided I would try to write my own interpreted Ish from this.\n\nI set out with a few goals. To understand how this worked, the different data structures/algorithms in use, to comment in places I felt might be useful and also to use few macros.\n\nAn important part was *use a minimal amount of macros*. This probably was stupid because now I have probably 12,000 lines of code or so just in one file (CPU.m) that is 65% duplicate (maybe inline functions or something at a later point..).\n\n### Interesting stuff?\n\nStudying everything I read as I went along I learned that the TLB (Translation Lookaside Buffer) could actually be unnecessary. While a hardware TLB, dedicated hardware that is a small cache for commonly used addresses and meta data, makes sense to me I do not think it is necessary to emulate in this case.. I am hoping to find out if there are any speed improvements from removing it. \n\nI also decided to ditch the classic multi layered page table hierarchy at this point to just use a simple array. I thought this would be great in this case because it showed me how simple the whole page table architecture really can be. That it is just a way to let humans break up memory into consistently sized pieces, re-usably re-locating them in different processes' virtual address space. It also is used to add meta data to these chunks of \"real\" memory so that when a process needs to perform a specific operation different protections and optimizations (like copy on write) can be performed.\n\nTo retrieve a \"real\"/final physical address, the most significant bits are always used to locate the page table entry. This leads to a physical memory address with the least significant bits being an offset into this \"page\" of memory.\n\nIn 32 bit environments 4096 bytes is a common page table size. 0 -\u003e 4095 can be counted using the first 12 bits. Therefore we can find any offset into a page by masking an address by 0b111111111111 (or 0xFFF) \n    \n    uint32_t offset = addr \u0026 0b111111111111; \n\nand we can find the 32 bit page table entry key by anding the address by 0xFFFFFFFFFFFFF000.\n\n    uint32_t page = addr \u0026 0xFFFFFFFFFFFFF000; \n\nWith this simple array as a page table you could just cut off the first 12 bits to find the correct page table entry. And again, no need to hassle with state of the TLB which is nice and saves some time (and I would love to find out if it was much of a speed improvement).\n\nThis is all probably pretty simple stuff but it felt good realizing that these data structures did not need to be as complicated as I had once assumed them to be.\n\n### Readability\n\nThere is really only a handful of opcodes I used macros for. And that could be helpful for learning macros for someone anyway if they were having a hard time finding a project they could read through easily.\n\nI have also messed with Ish enough that I was able to output a few JSON files with the CPU state for each process for every instruction/tick. (I might just push up a branch with the build of Ish I have been using to debug this project with at some point).\n\nI have actually verified that \"my\" implementation (in quotes because I had been referencing Ish while working on this, although minimally I hoped) executes correctly up until the first syscall. That is something like 12,000 operations.\n\nI have made a bunch of other small changes as well, mostly just to challenge myself so that I didn't just copy and paste code from Ish over into a new project. My goal was to be able to describe what any particular line of code did, not to be able to write this on my own necessarily. I also thought it would be nice if I could add comments throughout. Particularly in places I thought might be useful, that required me to search for more information, or where I just felt like adding comments.\n\nHere is some code that may or may not end up with comments. More importantly I thought it was easy to read and helped with the MODRM abstraction by removing the need to consider whether or not the the MODRM byte was referencing memory or a register. It shows the use of what most operations involve. Some combination of a register, whatever the \"MODRM\" byte says to operate on, and an immediate value.\n\n    [self readByteIncIP:\u0026modRMByte];\n    mrm = [self decodeModRMByte:modRMByte];\n    regPtr = [self getRegPointer:mrm.reg opSize:32];\n    if (mrm.type == modrm_register) {\n        rmWritePtr = rmReadPtr = [self getRegPointer:mrm.base opSize:32];\n        memcpy(\u0026rmReadValue, rmReadPtr, sizeof(uint32_t));\n    } else {\n        addr = [self getModRMAddress:mrm opSize:32];\n        if (!(rmReadPtr = [self.task.mem getPointer:addr type:MEM_READ])) {\n            return 13;\n        }\n        memcpy(\u0026rmReadValue, rmReadPtr, sizeof(uint32_t));\n        rmWritePtr = [self.task.mem getPointer:addr type:MEM_WRITE];\n    }\n    \n    regPtr = [self getRegPointer:mrm.reg opSize:32];\n\nand this dangling code block which can sometimes be found after the code above:\n\n    [self readFourBytesIncIP:\u0026imm32];\n\nThat first block of code is executed after the first opcode byte has been read and we have figured out which opcode we are parsing bytes for. Then that code above starts out by reading in the MODRM byte. This byte will specify the register or the address of the data that will be read or written to (in some cases this address is the value to be used itself which is seen in the LEA operation).\n\nThe nice part about this code is that regardless of the branch of logic we take we end up with 2 pointers rmWritePtr and rmReadPtr (this is disregarding the LEA case mentioned above, which is covered by the line assigning the addr variable). Both of which can be used regardless of whether the MODRM byte decided that this was a register operation or a memory operation. This way the code actually performing the operations doesn't need to check the MODRM byte or worry about this difference. When writing the code for a MODRM operation I can just use:\n\n    \\*(uint32_t \\*)rmWritePtr \n\nwhenever I need to set a R/M OR MODRM value and \n\n    \\*(uint32_t \\*)rmReadPtr \n\nwhenever I need to read a r/m value.\n\nFor example if I had an operation like:\n\n    ADD r16/32 r/m16/32  \n\nThis would be asking me to add the value from the register specified in the opcode with with MODRM value and store it in the MODRM location.\n\nI could get the (dumbed down) result with:\n\n    \\*(uint32_t \\*)rmWritePtr = (uint32_t)rmReadValue + \\*(uint32_t \\*)regPtr\n\nI thought this would lead to very readable opcodes.\n\nAnd I showed above how easy it is to read a few bytes from eip to grab an immediate value already.\n\nI added the memcpy in there because I was getting errors about alignment. This meant that the MODRM addresses were resulting in pointers whose addresses were not 4 byte aligned (divisible evenly by 4) for uint32_t's for example. However, now that I think about it, that may and most likely was a bug so hopefully I can remove that ugly code and get it back to:\n\n    [self readByteIncIP:\u0026modRMByte];\n    mrm = [self decodeModRMByte:modRMByte];\n    regPtr = [self getRegPointer:mrm.reg opSize:32];\n    if (mrm.type == modrm_register) {\n        rmWritePtr = rmReadPtr = [self getRegPointer:mrm.base opSize:32];\n        rmReadValue = *(uint32_t *)rmReadPtr;\n    } else {\n        addr = [self getModRMAddress:mrm opSize:32];\n        if (!(rmReadPtr = [self.task.mem getPointer:addr type:MEM_READ])) {\n            return 13;\n        }\n        rmReadValue = *(uint32_t *)rmReadPtr;\n        rmWritePtr = [self.task.mem getPointer:addr type:MEM_WRITE];\n    }\n    \n    regPtr = [self getRegPointer:mrm.reg opSize:8];\n\nor just remove the rmReadValue altogether which I had originally and always use \\*(uint32_t \\*)rmReadPtr in place of needing the line/s:\n\n    rmReadValue = *(uint32_t *)rmReadPtr;\n\nThis is probably correct and I am now pretty sure a previous operation had just resulted in an address being off by a few bytes resulting in this mis-alignment and leading to the need for memcpy.\n\n### Finishing up\n\nThe goal would be to get a terminal up if time allows. I would prefer not to hurry through the syscall/Linux kernel aspects of Ish. (I really want to play around with some different virtual memory ideas and to see if removing things like the TLB helps much). For that reason the syscalls may just end up copied over from Ish directly for now but I hope I have time later to learn more about how they work.\n\nThe x86 emulation part is running up until the point where the first syscall is executed. This was verified by comparing against the state of Ish. However I am sure there are still bugs in there, especially in the 16 bit version of the opcodes. These have had very little coverage.\n\nThe majority of the rest of the work to getting a terminal up (when I would be happy with this) probably lays in finishing off all the syscalls.\n\n\n### Thanks Ish\n\nIsh is an amazing project and I am glad that the author has open sourced it. I have learned a lot from reading through it and creating my broken clone. Thank you\n\nHere is a link to my project on github if you are interested.\n\n[x86UserModeEmu](https://github.com/bebrws/x86LinuxUserModeEmu)\n","slug":"Ish"},{"frontmatter":{"title":"Building this blog","author":"Brad Barrows","date":"2020-6-6"},"markdownBody":"\n# Introduction\n\nI just followed [this site](https://www.netlify.com/blog/2020/05/04/building-a-markdown-blog-with-next-9.4-and-netlify/) and used their Github repo as a base\n\n## Sorting posts\n\nModified PostList.js to sort the posts with this change:\n\n```\nimport Link from 'next/link'\n\nexport default function PostList({ posts }) {\n  posts.sort((x, y) =\u003e {\n    const a = new Date(x);\n    const b = new Date(y);\n    if (a \u003c b) return 1;\n    if (a \u003e b) return -1;\n    return 0;\n  })\n  if (posts === 'undefined') return null\n\n  return (\n    \u003cdiv\u003e\n      {!posts \u0026\u0026 \u003cdiv\u003eNo posts!\u003c/div\u003e}\n      \u003cul\u003e\n        {posts \u0026\u0026\n          posts.map((post) =\u003e {\n            return (\n              \u003cli key={post.slug}\u003e\n                \u003cp style={{marginTop:\"4px\", marginBottom: \"2px\"}}\u003e{post.frontmatter.date}: {` `}\u003c/p\u003e\n                \u003cLink href={{ pathname: `/post/${post.slug}` }}\u003e\n                  \u003ca\u003e{post?.frontmatter?.title}\u003c/a\u003e\n                \u003c/Link\u003e\n              \u003c/li\u003e\n            )\n          })}\n      \u003c/ul\u003e\n    \u003c/div\u003e\n  )\n}\n\n```\n\n","slug":"blog"},{"frontmatter":{"title":"Getting Input from STDIN after piping in STDIN to a C or Nim program","author":"Brad Barrows","date":"2020-1-22"},"markdownBody":"\nWriting my fzf like Nim library/application I ran into an issue. I could pipe input into the command line utility but then after processing the input from the piped\n\nSTDIN I was unable to get input from the user via getch\n\nI actually found the answer was a few lines of code.\n\nIn C:\n\n```\n#include \u003cstdio.h\u003e\n#include \u003cunistd.h\u003e\n```\n...\n\n```\n    if (!isatty(fileno(stdin))) {\n        // duplicate stdin file descriptor and open it as a FILE*\n        input = fdopen(dup(fileno(stdin)), \"r\");\n        // reopen stdin on the terminal (assuming stdout is still connected to the terminal)\n        freopen(ttyname(fileno(stdout)), \"r\", stdin);\n    }\n\n```\n\n\nIn Nim:\n```\n```\nimport posix \nimport os\nimport terminal\n\nproc fdopen(f: cint, mode: cstring): File {.\n    importc: \"fdopen\", header: \"\u003cstdio.h\u003e\", tags: [].}\n\nproc freopen(filename, mode: cstring, stream: File): File {.\n    importc: \"freopen\", nodecl.}    \n\n\nif getFileInfo(stdin).id.file != 37:\nvar stdindup = dup(c_fileno(stdin))\nvar input = fdopen(stdindup, cstring(\"r\"))\ndiscard freopen(ttyname(c_fileno(stdout)), cstring(\"r\"), stdin)\n\n```\n\nNote that c_fdopen and c_freopen should exist in the nim standard library like they do above. I was just having trouble importing them","slug":"GettingSTDINAfterPipe"},{"frontmatter":{"title":"Writing Nim Command Line Utilities","author":"Brad Barrows","date":"2020-1-20"},"markdownBody":"\nNim is an incredible language. It has an amazing type and macro system but I am not knowledgable enough to really go into how great this all is.\n\nOne great use for Nim that I have found though is writing command line utilities.\n\nWhen scripting something maybe too slow to write or run then writing it in Nim might be a good option.\n\nTo get started this is a short little example script which will read lines from stdin until EOF.\n\nFor each line read it will check if the line ends with a string which was passed as the first command line option.\n\nIf it does that line is echoed out to STDOUT. Basically a simple grep subset example\n\n```\nimport strformat\nimport strutils\nimport os\n\nproc rl(): tuple[line: string, eof: bool]   =\n  result.eof = false\n  result.line = \"\"\n  var l:string\n  try:\n    if not stdin.readLine(l):\n        result.eof = true\n    else:\n        result.line = l\n  except EOFError:\n    result.eof = true\n\nif paramCount() != 1:\n    echo fmt\"Usage: {paramStr(0)} string-to-check-if-stdin-lines-endswith\"\n    quit(1)\n\nwhile true:\n  var (l, eof) = rl()\n  if eof:\n      break\n  if l.endsWith paramStr(1):\n    echo l\n  \n```\n","slug":"NimCLUtils"},{"frontmatter":{"title":"Summertime","author":"Brad Barrows","date":"2019-12-22"},"markdownBody":"\nTrying to learn Summertime on the Cello and wrote out a Tab (missing any time signatures).\n\n* [Summertime - Louis Armstrong and Ella Fitzgerald Cello Tab PDF](/static/summertime/SummerTimeTab.pdf)\n* [Summertime - Louis Armstrong and Ella Fitzgerald Tab file for TabEdit](/static/summertime/SummerTimeTablEdit.tef)\n","slug":"Summertime"},{"frontmatter":{"title":"Wireguard","author":"Brad Barrows","date":"2019-12-14"},"markdownBody":"\nHow to setup a Wireguard VPN for free!\n\n1. Go grab a free account if you haven't already signed for one from [Azure](https://azure.microsoft.com/en-us/free/search/?\u0026ef_id=EAIaIQobChMIs6y5wYe25gIVFtRkCh3jJANyEAAYASABEgK6pvD_BwE:G:s\u0026OCID=AID2000128_SEM_hDTj6HPx\u0026MarinID=hDTj6HPx_287547081826_azure%20free%20account_e_c_TAwBQrMX_44568976297_kwd-300666823650\u0026lnkd=Google_Azure_Brand\u0026gclid=EAIaIQobChMIs6y5wYe25gIVFtRkCh3jJANyEAAYASABEgK6pvD_BwE) or you could use your AWS free compute hours with a small EC2 instance.\n\n2. Create a the small VM that fits in the free price range\n\n3. Set the networking rules to allow ANY traffic TCP/UDP over port 51820 (Wireguard really only used UDP though I am pretty sure).\n   In azure you would do this by creating the [Free VM](https://azuremarketplace.microsoft.com/en-us/marketplace/apps/microsoft.freeaccountvirtualmachine?tab=Overview) (which can be created with a few clicks from that link after creating your account). Then once the VM is created and ready you and you have a status of \"Your deployment is complete\" you can open the \"Deployment details\" section and click on the Resource link of Type \"Microsoft.Compute/virtumachines\".\n\n   In the left sidebar there will be a link for Networking. Click this.\n\n   On the networking page click \"Add Inbound port rule\".\n\n   Create a rule with the following:\n\n   ```\n      Source: Any\n      Source port range: *\n      Destination: Any\n      Desitnation port range: 51820\n      Protocal: Any\n      Action: Allow\n      PriorityL 380\n      Name: Port_51820\n      Description: Wireguard\n   ```\n\n4. SSH into your VM.\n\n5. Run the following:\n```\n# Generate public and private keys\n\numask 077\nwg genkey | tee privatekey | wg pubkey \u003e publickey\n\n# Run these as root\n\nsudo su\n\ncat \u003c\u003c EOF \u003e\u003e /etc/sysctl.conf\nnet.ipv4.ip_forward=1\nnet.ipv6.conf.all.forwarding=1\nEOF\n\nadd-apt-repository ppa:wireguard/wireguard\napt-get update\napt-get install wireguard\n\necho \"This is the Server Private Key:\"\ncat privatekey\n\necho \"This is the Server Public Key:\"\ncat publickey\n\necho \"This will be the Client Private Key if you need to generate one (using the OSX Wireguardd App?):\"\nwg genkey | sudo tee clientprivatekey\ncat clientprivatekey\n```\n\n1. Now if you are using the OSX Wireguard App you will create a new \"empty tunnnel\" by clicking the bottom left plus button. Paste in the following replacing \u003cIPAddressOfYourServer\u003e with your VM IP and then replace \u003cClientPrivateKey\u003e with the value from the clientprivatekey file. \u003cServerPublicKey\u003e will be replaced with the Server Public Key:\n\n```\n[Interface]\nPrivateKey = \u003cClientPrivateKey\u003e\nListenPort = 21841\nAddress = 192.168.2.2/32\nDNS = 1.1.1.1\n\n[Peer]\nPublicKey = \u003cServerPublicKey\u003e\nAllowedIPs = 0.0.0.0/0, ::/0\nEndpoint = \u003cIPAddressOfYourServer\u003e:51820\nPersistentKeepalive = 25\n```\n\n7. After replacing the values I mentioned and copying this into the Wireguard OSX App you will have a Client Public Key generated. It will be right above the text box you paste the configuration into. Take this value and replace \u003cPublicKeyFromClient\u003e with it. Replace \u003cPrivateKeyfromthe2ndComnmandAbove\u003e with the Server Private Key that was printed out in the last set of commands you ran on the VM. The run the following on your VM:\n\n```\ncat \u003c\u003c EOF \u003e\u003e /etc/wireguard/wg0.conf\n[Interface]\nAddress = 192.168.2.1\nPostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE; ip6tables -A FORWARD -i wg0 -j ACCEPT; ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE; ip6tables -D FORWARD -i wg0 -j ACCEPT; ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\nListenPort = 51820\nPrivateKey = \u003cPrivateKeyfromthe2ndComnmandAbove\u003e\nDNS = 1.1.1.1\n\n\n[Peer]\nPublicKey = \u003cPublicKeyFromClient\u003e\nAllowedIPs = 192.168.2.2/32\nEOF\n\n```\n\n\nYou may also want to setup a firewall on your VM by running:\n\n```\nsudo ufw allow 22/tcp\nsudo ufw allow 51820/udp\nsudo ufw enable\n```\n\nThis is optional.\n\n8. It is time to start the Wiregaurd server.\nRun this on your VM:\n```\nsudo wg-quick up wg0\nsudo systemctl enable wg-quick@wg0 # Set wireguard to run on system start\nsudo wg show # Check the status\n```\n\nNote: after every change to your /etc/wiregaurd/wg0.conf file you will need to bring the wiregaurd service down and back up again:\n\n```\nsudo wg-quick down wg0\nsudo wg-quick up wg0\n```\n\n9. You should now be able to go back to you Wireguard client and activate the connection. Google \"What Is My IP\" and verify that your IP has changed. You could then also try checking if you have DNS Leaks. Note that I am using Cloudflare DNS. I believe for a really secure VPN you would want to install DNS on your VPN as well but I have not bothered to attempt that yet.\n\n\n\nOther resources:\n\n[Another Ubuntu based tutorial](https://securityespresso.org/tutorials/2019/03/22/vpn-server-using-wireguard-on-ubuntu/)\n\n[Linode's tutorial which I had trouble with](https://www.linode.com/docs/networking/vpn/set-up-wireguard-vpn-on-ubuntu/)","slug":"Wireguard"},{"frontmatter":{"title":"OSX - Manually configuring System Preferences Security And Privacy settings","author":"Brad Barrows","date":"2019-07-01"},"markdownBody":"\nI have a laptop which I wanted to be able to check the status of remotely.\n\nFor remote access on OSX I was using Jump Desktop.I had this same issue with RealVNC and other remote desktop services though.\n\nSpecifically, on Catalina I ran into an issue where after installing Jump Desktop Connect. I was not able to add Jump Desktop Connect to my Security And Privacy settings to enable the Screen Recording permission.\n\nAfter some grepping.I figured out that a sqlite DB exists that contains all the OSX Catalina Security and Privacy settings.\n\nThis DB can be opened with:\n```\n  sudo sqlite3 /Library/Application\\ Support/com.apple.TCC/TCC.db\n```\nThe table of interest is called acccess.\n\nTo get some information on this table run:\n```\n  PRAGMA table_info(access);\n  .schema access\n```\n\nAnd then checking out the already existing Privacy System Preferences is really helpful to figure out what is going on as well;\n\n```\nselect * from access;\n```\n\n\nFrom the first command ().schema access), you will see it has the followign columns:\n```\n  0|service|TEXT|1||1\n  1|client|TEXT|1||2\n  2|client_type|INTEGER|1||3\n  3|allowed|INTEGER|1||0\n  4|prompt_count|INTEGER|1||0\n  5|csreq|BLOB|0||0\n  6|policy_id|INTEGER|0||0\n  7|indirect_object_identifier_type|INTEGER|0||0\n  8|indirect_object_identifier|TEXT|0||4\n  9|indirect_object_code_identity|BLOB|0||0\n  10|flags|INTEGER|0||0\n  11|last_modified|INTEGER|1|CAST(strftime('%s','now') AS INTEGER)|0\n```\n\n\nSo after figuring out the coumns in this table and with examples from pre existing rows I went about creating my own SQL queries to insert new Privacy options into System Preferences.\n\n\nI then found a row for a service that had the permissions I wanted for Jump Desktop Connect\n```\n  kTCCServiceScreenCapture|com.apple.screensharing.agent|0|0|1||||UNUSED||0|1573525900\n```\nAnd then a row for Jump Desktop Connect itself:\n```\n  kTCCServiceAccessibility|com.p5sys.jump.connect|0|1|1|??|||UNUSED||0|1572360434\n```\nNow I have the client string I need and an example row. I duplicated the screensharing service row but switched out the Jump Desktop Connect client string and ran the following in the sqlite3 client:\n```\n  INSERT INTO access (service,client,client_type,allowed,prompt_count,csreq,policy_id,indirect_object_identifier_type,indirect_object_identifier,indirect_object_code_identity,flags,last_modified) VALUES (\n  'kTCCServiceScreenCapture','com.p5sys.jump.connect',0,0,1,NULL,NULL,NULL,'UNUSED',NULL,0,1573525900);\n```\nThen I was able to open System Preferences Security and Privacy settins and enable the Screen Recording permission on the application. It finally was showing the list. I probably could also just run\n\n```\n  INSERT INTO access (service,client,client_type,allowed,prompt_count,csreq,policy_id,indirect_object_identifier_type,indirect_object_identifier,indirect_object_code_identity,flags,last_modified) VALUES (\n  'kTCCServiceScreenCapture','com.p5sys.jump.connect',0,1,1,NULL,NULL,NULL,'UNUSED',NULL,0,1573525900);\n```\nTo automatically enable this setting but I did not test this.\n\n\n\n\nThe other day I actually had some trouble screen sharing with Google Chrome as well. To fix this I just needed to figure out the applications \"client\" string:\n\n```\ncom.google.Chrome\n```\nand\n```\ncom.google.Chrome.canary\n```\nfor Chrome Canary.\n\nThis I could create Screen Sharing options in the Privay preferences with:\n\n```\nINSERT INTO access (service,client,client_type,allowed,prompt_count,csreq,policy_id,indirect_object_identifier_type,indirect_object_identifier,indirect_object_code_identity,flags,last_modified) VALUES (\n  'kTCCServiceScreenCapture','com.google.Chrome',0,0,1,NULL,NULL,NULL,'UNUSED',NULL,0,1573525900);\n\n\nINSERT INTO access (service,client,client_type,allowed,prompt_count,csreq,policy_id,indirect_object_identifier_type,indirect_object_identifier,indirect_object_code_identity,flags,last_modified) VALUES (\n  'kTCCServiceScreenCapture','com.google.Chrome.canary',0,0,1,NULL,NULL,NULL,'UNUSED',NULL,0,1573525900);\n```\n\n\nAnd I also created Accessibility options with:\n\n```\nINSERT INTO access (service,client,client_type,allowed,prompt_count,csreq,policy_id,indirect_object_identifier_type,indirect_object_identifier,indirect_object_code_identity,flags,last_modified) VALUES (\n  'kTCCServiceAccessibility','com.google.Chrome',0,0,1,NULL,NULL,NULL,'UNUSED',NULL,0,1573525900);\n\n\nINSERT INTO access (service,client,client_type,allowed,prompt_count,csreq,policy_id,indirect_object_identifier_type,indirect_object_identifier,indirect_object_code_identity,flags,last_modified) VALUES (\n  'kTCCServiceAccessibility','com.google.Chrome.canary',0,0,1,NULL,NULL,NULL,'UNUSED',NULL,0,1573525900);\n```\n\njust in case..","slug":"OSXSecurity"},{"frontmatter":{"title":"Me Surfing","author":"Brad Barrows","date":"2018-9-30","hero_image":"/static/surf.gif"},"markdownBody":"## Surfing in SLO\n\n","slug":"surf"}],"title":"Brad Barrow's Blog","description":"Brad Barrow's Blog"},"__N_SSG":true},"page":"/","query":{},"buildId":"45tfF6MpfldVRTJI8LRtS","runtimeConfig":{},"nextExport":false,"isFallback":false,"gsp":true}</script><script nomodule="" src="/_next/static/chunks/polyfills-d2fc0a4bf0d27c7e92ce.js"></script><script src="/_next/static/chunks/main-1a0b48e76d1a25b5954c.js" async=""></script><script src="/_next/static/chunks/webpack-488dc228921f1fdbc0e7.js" async=""></script><script src="/_next/static/chunks/framework.a5d4ffe593e18b49243e.js" async=""></script><script src="/_next/static/chunks/commons.2c990f5acfba8cce8cde.js" async=""></script><script src="/_next/static/chunks/pages/_app-ddaf94004a81f2f7f2c1.js" async=""></script><script src="/_next/static/chunks/9f96d65d.94eaa061f5101393e8b9.js" async=""></script><script src="/_next/static/chunks/24cc8a7e01ac9d85e38f29fc4987db83269d4616.3441cd27ae9051da26be.js" async=""></script><script src="/_next/static/chunks/pages/index-b0bc3ad5c186ea0c1659.js" async=""></script><script src="/_next/static/45tfF6MpfldVRTJI8LRtS/_buildManifest.js" async=""></script><script src="/_next/static/45tfF6MpfldVRTJI8LRtS/_ssgManifest.js" async=""></script></body></html>```