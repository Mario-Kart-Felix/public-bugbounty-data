```<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <title>Barter - beyond design by contract</title>
  <meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
  <style type="text/css">
	body {
		background: rgb(255,255,250);
		color: rgb(0,48,0);
	}
	pre {
		border: 1px solid ;
		background-color: rgb(255,255,240);
		padding: 8px;
		margin: 8px;
	}
	h1, h2, h3, h4 {
		font-family: "Trebuchet MS", Verdana, sans-serif;
	}
	p, li, dl {
		font-family: Verdana, sans-serif;
		font-size: 10pt;
		margin-left: 8px;
	}
	dt {
		font-weight: bold;
	}
	dd {
		padding-bottom: 8px;
	}
	.warn {
		text-align: center;
		border: 1px solid red;
		background: #fee;
		padding: 1em;
		margin: 0 4em;
	}
  </style>
</head>
<body>

<p class="warn">
<strong>Note:</strong> This project is obsolete and is not being maintained. It might be useful for research purposes, but is not suitable for real-world usage!
</p>

<h1>Barter - beyond design by contract</h1>

<ul>
<li><a href="#whatis">What is Barter?</a></li>
<li><a href="#quickref">Quick reference</a></li>
<li><a href="#advanced">Advanced features</a></li>
<li><a href="#faq">F.A.Q.</a></li>
<li><a href="#examples">Examples</a></li>
<li><a href="#license">License</a></li>
<li><a href="#todo">To do</a></li>
<li><a href="#contact">Contact</a></li>
</ul>

<h3><a name="whatis">What is Barter?</a></h3>

<p>Barter is a tool for increasing the quality of applications written in Java.
It allows the programmer to use <a href="http://www.google.com/search?q=Design+By+Contract">design by contract</a> and define other
development aspects right in the classes and interfaces where they are relevant, as JavaDoc comments.
It is essentially a code generator for <a href="http://aspectj.org">AspectJ</a>, implemented as an <a href="http://xdoclet.sourceforge.net/">xDoclet</a> task.
If this is confusing, take a look at some <a href="#examples">examples</a> below, and ye shall be enlightened.
</p>

<p>Please visit the <a href="http://www.sourceforge.net/projects/barter/">Barter project page</a> at SourceForge for <a href="http://sourceforge.net/project/showfiles.php?group_id=56895">downloads</a>.</p>


<h3><a name="quickref">Quick reference</a></h3>

<h4>Special variables</h4>

<dl>

<dt>$this</dt>
<dd>Refers to the instance the contract is being evaluated on. Available in @barter.invariant, @barter.pre, @barter.post, @barter.before, @barter.after.</dd>

<dt>$result</dt>
<dd>Available in @barter.post, @barter.after.</dd>

</dl>

<h4>Class level</h4>

<dl>

<dt>@barter</dt>
<dd>Triggers aspect generation for the class.</dd>
  
<dt>@barter.invariant <i>booleanExpression</i></dt>
<dd>Class invariant. Expression is evaluated before and after the invocation of any public method on the class.</dd>

<dt>@barter.warning <i>aspectjPointcut : String</i></dt>
<dd>Emit a compilation-time warning if the pointcut exits in the program.</dd>

<dt>@barter.error <i>aspectjPointCut : String</i></dt>
<dd>Emit a compilation-time error if the pointcut exists in the program.</dd>

</dl>

<h4>Method level</h4>

<p>Note: in method level expressions, you can refer to all the parameters passed in to the call.</p>
 
<dl>
<dt>@barter.pre <i>booleanExpression</i></dt>
<dd>Precondition: expression is checked before the method is executed.</dd>

<dt>@barter.post <i>booleanExpression</i></dt>
<dd>Postcondition: expression is checked after the method returns.</dd>

<dt>@barter.before <i>javaExpression</i></dt>
<dd>Expression is executed before the method is invoked.</dd>

<dt>@barter.after <i>javaExpression</i></dt>
<dd>Expression is executed after the method returns.</dd>

</dl>

<h3><a name="advanced">Advanced features</a></h3>

<h4>Violation handlers</h4>

<p>Barter provides a flexible way to handle assertion failure. You can specifiy your own implementation of
<code>barter.runtime.ViolationHandlerI</code>, that will be invoked when a pre-/postcondition or invariant
fails. The default implementation throws a <code>BarterAssertionFailed</code> error. To specify an alternative
class, you have to set the <cobe>barter.invariantHandler</code> system property (see build.xml for an example
of how to do this). A "tracing" handler that simply prints the exception is also included
(<code>barter.runtime.impl.TracingViolationHandler</code>) - this is useful if you are instrumenting an existing
application.</p>

<h4>Assertion configuration</h4>

<p>It is possible to selectively evaluate assertions. You just need to provide an implementation of <code>barter.runtime.AssertionConfigurationI</code>, and set the <code>barter.assertionConfig</code> system property to the classname. This way you gain runtime control over which assertions to evaluate on a per-class basis. You could help out by writing a nice AssertionConfigurationI that can read a configuration file.</p>

<h3><a name="faq">F.A.Q.</a></h3>

<h4>How is Barter different from using AspectJ?</h4>

<p>
Barter focuses on capturing the "usage policy" of classes and interfaces where they are the most convenient: right in the source code of the class.
AspectJ requires you to maintain these aspects in separate files. AspectJ is very expressive, however, it can be overwhelming for
common things, like verifying pre- and postconditions. Barter attempts to keep simple things simple.</p>

<h4>How is it different from other Java design-by-contract tools?</h4>

<p>Other tools, like <a href="http://www.reliable-systems.com/tools/iContract/iContract.htm">iContract</a> also provide design-by-contract. Barter leverages the advanced features of AspectJ, so you can define more interesting contracts/policies about a class, and add other development aspects.</p>

<h4>Does this mean that I don't have to write any boring test-cases?</h4>

<p>Barter significantly reduces complexity of testing, but doesn't replace it. Even though assertions are now consistently enforced (and inherited),
you still need to excercise the classes, and test interactions between them. And as usual, <a href="http://cricketcage.sf.net/">aspects come to the rescue</a>.
</p>

<h4>Is it buzzword-compliant?</h4>

<p>Hell, yeah. You can easily use Barter and any of the following expressions in the same sentence: aspect oriented / extreme / literate programming,
agile development, continuous integration, and a lot more...</p>

<h3><a name="examples">Examples</a></h3>

<p>The following code demonstrates simple pre- and postconditions and inheritance of contracts.</p>
      
<pre>/** <b>@barter</b> */
interface Foo {

	/**
	 * <b>@barter.pre bar>0</b>		
	 * <b>@barter.post $result!=null</b>
	 */
	public String getFoo(int bar);

}

/** <b>@barter</b> */
class FooImpl implements Foo {

	/**
	 * <b>@barter.post !$result.equals("ugly")</b>
	 */
	public String getFoo(int bar) {
		switch (bar) {
			// intentional bugs :-)
			case 10: return "ugly";
			case 100: return null;
		}
		return "ok";
	}
	
	public static void main(String args[]) {
		Foo f = new FooImpl();
		f.getFoo( 5 );		<b>// everything's fine</b>
		f.getFoo( -2 );		<b>// caller violates the precondition defined in Foo</b>
		f.getFoo( 10 );		<b>// implementation violates the postcondition defined in Foo</b>
		f.getFoo( 100 );	<b>// implementation violates the postcondition defined in FooImpl</b>
	}
}
</pre>

<h3><a name="license">License</a></h3>

<p>Barter is released under the terms of the <a href="http://www.gnu.org/copyleft/lesser.html">LGPL</a> (GNU Lesser General Public License).</p>

<h3><a name="todo">To do</a></h3>

<ul>
<li>Implement ability to refer to "old" variables in postcondition</li>
<li>Fix unusal (shall we say broken) precondition inheritance. Preconditions are evaluated the same way as postconditions: using AND instead of OR.
This goes againts the <a href="http://c2.com/cgi/wiki?LiskovSubstitutionPrinciple">Liskov Substitution Principle</a>, and general DbC implementations.
I haven't really figured out how to implement this properly with AspectJ. Looks like other people <a href="http://www2.parc.com/csl/groups/sda/publications/papers/Lopes-CSL-99-01/for-web.pdf">also ran into this issue</a> (page 10).</li>
<li>Implement simplified accessors for Collections (eg. foreach, exists)</li>
<li>Test effect on exception handling</li>
<li>More documentation</li>
<li>More examples</li>
</ul>

<h3><a name="contact">Contact</a></h3>

<p>For discussing Barter, please subscribe to the <a href="http://lists.sourceforge.net/lists/listinfo/barter-users">barter-users mailing list</a>. If you have any comments, questions or contributions, feel free to <a href="mailto:phraktle@users.sourceforge.net">drop me an email</a>.</p>

<p><a href="http://sourceforge.net"><img src="http://sourceforge.net/sflogo.php?group_id=56895&amp;type=1" width="88" height="31" border="0" alt="SourceForge.net Logo"></a></p>

<p style="font-size: 8pt; text-align: right;">Copyright &copy; 2002. Viktor Szathmary</p>

</body>
</html>
```